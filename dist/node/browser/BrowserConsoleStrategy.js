"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserConsoleStrategy = void 0;
const LogStrategy_1 = require("../logging/LogStrategy");
class BrowserConsoleStrategy extends LogStrategy_1.LogStrategy {
    constructor(maxStringLength = 5000, maxDepth = 10) {
        super();
        this.MAX_STRING_LENGTH = maxStringLength;
        this.MAX_DEPTH = maxDepth;
    }
    isLogMessage(body) {
        return (typeof body === "object" &&
            body !== null &&
            "timestamp" in body &&
            "level" in body &&
            "message" in body);
    }
    async sendPackaged(packagedMessage, options) {
        const { header, body } = packagedMessage;
        const logLevel = options?.logLevel || LogStrategy_1.LogLevel.INFO;
        if (this.isLogMessage(body)) {
            this.formatLogMessage(body, header.requestId);
        }
        else {
            this.formatGenericMessage(body, logLevel, header.timestamp, header.requestId);
        }
    }
    formatLogMessage(logMessage, requestId) {
        const { sender, timestamp, level, message, payload } = logMessage;
        const logLevel = parseInt(level) || LogStrategy_1.LogLevel.INFO;
        const color = BrowserConsoleStrategy.LOG_COLORS[logLevel];
        console.groupCollapsed(`%c[${logLevel}] ${new Date(timestamp).toISOString()}`, color);
        if (sender) {
            console.log(`Sender: ${sender}`);
        }
        console.log(`Message: ${message}`);
        console.log(`RequestID: ${requestId}`);
        if (payload) {
            console.log("Payload:", payload);
        }
        console.groupEnd();
    }
    formatGenericMessage(message, logLevel, timestamp, requestId) {
        const color = BrowserConsoleStrategy.LOG_COLORS[logLevel];
        console.groupCollapsed(`%c[${logLevel}] ${new Date(timestamp).toISOString()}`, color);
        console.log(`RequestID: ${requestId}`);
        if (typeof message === "object" && message !== null) {
            console.log("Message:", message);
        }
        else {
            console.log(`Message: ${message}`);
        }
        console.groupEnd();
    }
    async log(message, logLevel = LogStrategy_1.LogLevel.INFO) {
        await this.send(message, { logLevel });
    }
    async info(message, data) {
        await this.log({ message, data }, LogStrategy_1.LogLevel.INFO);
    }
    async warn(message, data) {
        await this.log({ message, data }, LogStrategy_1.LogLevel.WARN);
    }
    async error(message, data) {
        await this.log({ message, data }, LogStrategy_1.LogLevel.ERROR);
    }
    async debug(message, data) {
        await this.log({ message, data }, LogStrategy_1.LogLevel.DEBUG);
    }
}
exports.BrowserConsoleStrategy = BrowserConsoleStrategy;
BrowserConsoleStrategy.LOG_COLORS = {
    [LogStrategy_1.LogLevel.INFO]: "color: blue",
    [LogStrategy_1.LogLevel.WARN]: "color: orange",
    [LogStrategy_1.LogLevel.ERROR]: "color: red",
    [LogStrategy_1.LogLevel.DEBUG]: "color: green",
};
//# sourceMappingURL=data:application/json;base64,