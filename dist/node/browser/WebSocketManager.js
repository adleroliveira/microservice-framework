"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketManager = exports.WebSocketState = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const BrowserConsoleStrategy_1 = require("./BrowserConsoleStrategy");
var WebSocketState;
(function (WebSocketState) {
    WebSocketState[WebSocketState["CONNECTING"] = 0] = "CONNECTING";
    WebSocketState[WebSocketState["OPEN"] = 1] = "OPEN";
    WebSocketState[WebSocketState["CLOSING"] = 2] = "CLOSING";
    WebSocketState[WebSocketState["CLOSED"] = 3] = "CLOSED";
})(WebSocketState || (exports.WebSocketState = WebSocketState = {}));
class WebSocketManager extends eventemitter3_1.default {
    constructor(url, secure = false, maxReconnectAttempts = 5, reconnectInterval = 5000, connectionTimeout = 10000) {
        super();
        this.reconnectAttempts = 0;
        this.state = WebSocketState.CLOSED;
        this.logger = new BrowserConsoleStrategy_1.BrowserConsoleStrategy();
        this.url = url;
        this.secure = secure;
        this.maxReconnectAttempts = maxReconnectAttempts;
        this.reconnectInterval = reconnectInterval;
        this.connectionTimeout = connectionTimeout;
        this.connect();
    }
    connect() {
        this.state = WebSocketState.CONNECTING;
        const secureUrl = this.getSecureUrl(this.url, this.secure);
        this.logger.info(`Attempting to connect to ${secureUrl}`);
        this.ws = new WebSocket(secureUrl);
        this.setHooks();
        this.setConnectionTimeout();
    }
    getSecureUrl(url, secure) {
        return secure ? url.replace(/^ws:/, "wss:") : url;
    }
    setHooks() {
        this.ws.onopen = () => {
            this.clearConnectionTimeout();
            this.state = WebSocketState.OPEN;
            this.reconnectAttempts = 0;
            this.logger.info(`WebSocket opened. ReadyState: ${this.ws.readyState}`);
            this.emit("open");
        };
        this.ws.onclose = (event) => {
            this.clearConnectionTimeout();
            this.state = WebSocketState.CLOSED;
            this.logger.info(`WebSocket closed. ReadyState: ${this.ws.readyState}. Code: ${event.code}, Reason: ${event.reason}`);
            this.emit("close", event);
            this.handleReconnection();
        };
        this.ws.onerror = (error) => {
            this.logger.error(error);
            this.emit("error", error);
        };
        this.ws.onmessage = (event) => {
            const parsedData = this.parseMessage(event.data);
            this.emit("message", parsedData);
        };
    }
    handleReconnection() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            const minDelay = 1000;
            const delay = Math.max(minDelay, this.reconnectInterval * Math.pow(2, this.reconnectAttempts - 1));
            this.logger.info(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);
            setTimeout(() => this.connect(), delay);
        }
        else {
            this.logger.error("Max reconnection attempts reached. Please reconnect manually.");
            this.emit("maxReconnectAttemptsReached");
        }
    }
    setConnectionTimeout() {
        this.connectionTimer = window.setTimeout(() => {
            if (this.state === WebSocketState.CONNECTING) {
                this.logger.error("Connection attempt timed out");
                this.ws.close();
            }
        }, this.connectionTimeout);
    }
    clearConnectionTimeout() {
        if (this.connectionTimer) {
            window.clearTimeout(this.connectionTimer);
        }
    }
    parseMessage(data) {
        try {
            return JSON.parse(data);
        }
        catch (error) {
            return data;
        }
    }
    send(message) {
        if (this.state === WebSocketState.OPEN) {
            const data = typeof message === "string" ? message : JSON.stringify(message);
            this.ws.send(data);
        }
        else {
            const error = new Error("WebSocket is not open");
            this.emit("error", error);
        }
    }
    close() {
        this.state = WebSocketState.CLOSING;
        this.ws.close();
    }
    reconnect() {
        this.logger.debug("Manual reconnection initiated.");
        this.reconnectAttempts = 0;
        this.close();
        this.connect();
    }
    getState() {
        return this.state;
    }
    getReadyState() {
        return this.ws.readyState;
    }
}
exports.WebSocketManager = WebSocketManager;
//# sourceMappingURL=data:application/json;base64,