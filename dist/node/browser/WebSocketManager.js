"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketManager = exports.AuthMethod = exports.WebSocketState = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const BrowserConsoleStrategy_1 = require("./BrowserConsoleStrategy");
var WebSocketState;
(function (WebSocketState) {
    WebSocketState[WebSocketState["CONNECTING"] = 0] = "CONNECTING";
    WebSocketState[WebSocketState["OPEN"] = 1] = "OPEN";
    WebSocketState[WebSocketState["CLOSING"] = 2] = "CLOSING";
    WebSocketState[WebSocketState["CLOSED"] = 3] = "CLOSED";
})(WebSocketState || (exports.WebSocketState = WebSocketState = {}));
var AuthMethod;
(function (AuthMethod) {
    AuthMethod["TOKEN"] = "token";
    AuthMethod["CREDENTIALS"] = "auth";
})(AuthMethod || (exports.AuthMethod = AuthMethod = {}));
class WebSocketManager extends eventemitter3_1.default {
    constructor(config) {
        super();
        this.reconnectAttempts = 0;
        this.state = WebSocketState.CLOSED;
        this.protocols = [];
        this.logger = new BrowserConsoleStrategy_1.BrowserConsoleStrategy();
        this.url = config.url;
        this.secure = config.secure || false;
        this.auth = config.auth;
        this.maxReconnectAttempts = config.maxReconnectAttempts || 5;
        this.reconnectInterval = config.reconnectInterval || 5000;
        this.connectionTimeout = config.connectionTimeout || 10000;
        this.setupAuthProtocols();
        this.connect();
    }
    setupAuthProtocols() {
        if (!this.auth)
            return;
        switch (this.auth.method) {
            case AuthMethod.TOKEN:
                if (this.auth.token) {
                    this.protocols.push(`token.${this.auth.token}`);
                }
                break;
            case AuthMethod.CREDENTIALS:
                if (this.auth.credentials) {
                    const { username, password } = this.auth.credentials;
                    const credentials = btoa(encodeURIComponent(password)).replace(/=/g, "");
                    this.protocols.push(`auth-${username}-${credentials}`);
                    this.logger.debug(`Auth protocol`, this.protocols);
                }
                break;
        }
    }
    connect() {
        this.state = WebSocketState.CONNECTING;
        const secureUrl = this.getSecureUrl(this.url, this.secure);
        // Add token to URL if using query parameter authentication
        const urlWithAuth = this.auth?.method === AuthMethod.TOKEN && this.auth.token
            ? `${secureUrl}?token=${this.auth.token}`
            : secureUrl;
        this.logger.info(`Attempting to connect to ${urlWithAuth}`);
        try {
            this.ws = new WebSocket(urlWithAuth, this.protocols);
            this.setHooks();
            this.setConnectionTimeout();
        }
        catch (error) {
            this.handleConnectionError(error);
        }
    }
    handleConnectionError(error) {
        this.logger.error("Connection error:", error);
        this.emit("error", {
            type: "CONNECTION_ERROR",
            message: "Failed to establish WebSocket connection",
            error,
        });
    }
    getSecureUrl(url, secure) {
        return secure ? url.replace(/^ws:/, "wss:") : url;
    }
    setHooks() {
        this.ws.onopen = () => {
            this.clearConnectionTimeout();
            this.state = WebSocketState.OPEN;
            this.reconnectAttempts = 0;
            this.logger.info(`WebSocket opened. ReadyState: ${this.ws.readyState}`);
            this.emit("open");
        };
        this.ws.onerror = (error) => {
            const wsError = error.target;
            if (wsError.readyState === WebSocket.CLOSED) {
                const errorDetails = {
                    type: "CONNECTION_ERROR",
                    message: "Connection failed",
                    readyState: wsError.readyState,
                    url: wsError.url,
                };
                if (this.reconnectAttempts === 0) {
                    // First connection attempt failed immediately - likely auth failure
                    errorDetails.type = "AUTH_ERROR";
                    errorDetails.message = "Authentication required";
                }
                this.logger.error("WebSocket error:", errorDetails);
                this.emit("error", errorDetails);
            }
            else {
                this.logger.error("WebSocket error:", error);
                this.emit("error", error);
            }
        };
        this.ws.onclose = (event) => {
            this.clearConnectionTimeout();
            this.state = WebSocketState.CLOSED;
            // Handle all potential authentication-related close codes
            if (event.code === 1001 || // Going Away
                event.code === 1006 || // Abnormal Closure (what browsers often use for 401)
                event.code === 1008) {
                // Policy Violation
                const error = {
                    type: "AUTH_ERROR",
                    code: event.code,
                    reason: event.reason || "Authentication required",
                };
                this.emit("error", error);
                return;
            }
            this.logger.info(`WebSocket closed. ReadyState: ${this.ws.readyState}. Code: ${event.code}, Reason: ${event.reason}`);
            this.emit("close", event);
            this.handleReconnection();
        };
        this.ws.onmessage = (event) => {
            const parsedData = this.parseMessage(event.data);
            this.emit("message", parsedData);
        };
    }
    async checkAuthRequirement() {
        try {
            // Make a regular HTTP request to check auth requirements
            const response = await fetch(this.url.replace(/^ws/, "http"));
            if (response.status === 401) {
                const error = {
                    type: "AUTH_ERROR",
                    message: "Authentication required",
                    status: response.status,
                };
                this.emit("error", error);
                return false;
            }
            return true;
        }
        catch (error) {
            // Network error or other issues - proceed with WebSocket connection
            return true;
        }
    }
    handleReconnection() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            const minDelay = 1000;
            const delay = Math.max(minDelay, this.reconnectInterval * Math.pow(2, this.reconnectAttempts - 1));
            this.logger.info(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);
            setTimeout(() => this.connect(), delay);
        }
        else {
            this.logger.error("Max reconnection attempts reached. Please reconnect manually.");
            this.emit("maxReconnectAttemptsReached");
        }
    }
    setConnectionTimeout() {
        this.connectionTimer = window.setTimeout(() => {
            if (this.state === WebSocketState.CONNECTING) {
                this.logger.error("Connection attempt timed out");
                this.ws.close();
            }
        }, this.connectionTimeout);
    }
    clearConnectionTimeout() {
        if (this.connectionTimer) {
            window.clearTimeout(this.connectionTimer);
        }
    }
    parseMessage(data) {
        try {
            return JSON.parse(data);
        }
        catch (error) {
            return data;
        }
    }
    send(message) {
        if (this.state === WebSocketState.OPEN) {
            const data = typeof message === "string" ? message : JSON.stringify(message);
            this.ws.send(data);
        }
        else {
            const error = new Error("WebSocket is not open");
            this.emit("error", error);
        }
    }
    close() {
        this.state = WebSocketState.CLOSING;
        this.ws.close();
    }
    reconnect() {
        this.logger.debug("Manual reconnection initiated.");
        this.reconnectAttempts = 0;
        this.close();
        this.connect();
    }
    getState() {
        return this.state;
    }
    getReadyState() {
        return this.ws.readyState;
    }
    setAuthConfig(authConfig) {
        this.auth = authConfig;
        this.setupAuthProtocols();
    }
    isAuthenticated() {
        return this.state === WebSocketState.OPEN;
    }
    reconnectWithNewAuth(authConfig) {
        this.setAuthConfig(authConfig);
        this.reconnect();
    }
}
exports.WebSocketManager = WebSocketManager;
//# sourceMappingURL=data:application/json;base64,