"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimitedTaskScheduler = void 0;
const events_1 = require("events");
const Loggable_1 = require("../logging/Loggable");
const InMemoryQueueStrategy_1 = require("./InMemoryQueueStrategy");
class RateLimitedTaskScheduler extends Loggable_1.Loggable {
    constructor(concurrencyLimit = 10, tasksPerInterval = 5, interval = 1000, queue = new InMemoryQueueStrategy_1.InMemoryQueueStrategy()) {
        super();
        this.concurrencyLimit = concurrencyLimit;
        this.tasksPerInterval = tasksPerInterval;
        this.interval = interval;
        this.queue = queue;
        this.runningTasks = 0;
        this.tasksInitiatedInWindow = 0;
        this.windowStartTime = Date.now();
        this.emitter = new events_1.EventEmitter();
        this.taskProcessedCount = 0;
        this.windowCheckInterval = null;
        if (interval <= 0)
            throw new Error("Interval must be greater than 0");
        this.instanceId = Math.random().toString(36).slice(2, 11);
        // this.debug(
        //   `Scheduler initialized with concurrencyLimit: ${concurrencyLimit}, tasksPerInterval: ${tasksPerInterval}, interval: ${interval}ms`
        // );
    }
    createDeferredTask(task, input) {
        return { execute: task, input };
    }
    setConcurrencyLimit(limit) {
        this.concurrencyLimit = limit;
        this.resetWindowState();
    }
    setTasksPerInterval(limit) {
        this.tasksPerInterval = limit;
        this.resetWindowState();
    }
    setInterval(interval) {
        this.interval = interval;
        this.resetWindowState();
    }
    scheduleTask(task, input) {
        const deferredTask = this.createDeferredTask(task, input);
        this.processOrEnqueueTask(deferredTask);
        this.restartTimerIfNeeded();
    }
    async scheduleTasks(tasks) {
        for (const { task, input } of tasks) {
            this.scheduleTask(task, input);
        }
    }
    onTaskComplete(callback) {
        this.emitter.on("taskComplete", callback);
    }
    processOrEnqueueTask(deferredTask) {
        this.updateWindowState();
        if (this.canInitiateTask()) {
            this.initiateTask(deferredTask);
        }
        else {
            this.queue.enqueue(deferredTask);
            // this.debug(`Task enqueued. Current queue size: ${this.queue.size()}`);
        }
    }
    updateWindowState() {
        const now = Date.now();
        if (now - this.windowStartTime >= this.interval) {
            this.windowStartTime = now;
            this.tasksInitiatedInWindow = 0;
        }
    }
    canInitiateTask() {
        this.updateWindowState();
        return (this.tasksInitiatedInWindow < this.tasksPerInterval &&
            this.runningTasks < this.concurrencyLimit);
    }
    initiateTask(deferredTask) {
        this.tasksInitiatedInWindow++;
        this.runningTasks++;
        this.processTask(deferredTask);
    }
    async processTask(deferredTask) {
        const startTime = Date.now();
        let result;
        try {
            const executionResult = await deferredTask.execute(deferredTask.input);
            result = {
                success: true,
                result: executionResult,
            };
            this.taskProcessedCount++;
            const endTime = Date.now();
            // this.debug(`Task completed. Execution time: ${endTime - startTime}ms`);
            this.emitter.emit("taskComplete", result);
        }
        catch (error) {
            result = {
                success: false,
                error: error instanceof Loggable_1.LoggableError ? error : new Loggable_1.LoggableError(error),
            };
            this.error("Task execution failed", error);
            this.emitter.emit("taskComplete", result);
        }
        finally {
            this.runningTasks--;
            this.processNextTaskIfAvailable();
            this.stopTimerIfNoTasks();
        }
    }
    processNextTaskIfAvailable() {
        if (this.queue.size() > 0 && this.canInitiateTask()) {
            const nextTask = this.queue.dequeue();
            if (nextTask) {
                this.initiateTask(nextTask);
            }
        }
    }
    checkAndProcessTasks() {
        this.updateWindowState();
        while (this.canInitiateTask() && this.queue.size() > 0) {
            const nextTask = this.queue.dequeue();
            if (nextTask) {
                this.initiateTask(nextTask);
            }
        }
        this.stopTimerIfNoTasks();
    }
    restartTimerIfNeeded() {
        if (this.windowCheckInterval === null &&
            (this.runningTasks > 0 || this.queue.size() > 0)) {
            this.windowCheckInterval = setInterval(() => this.checkAndProcessTasks(), Math.min(this.interval, 1000));
            // this.debug("Timer started");
        }
    }
    stopTimerIfNoTasks() {
        if (this.windowCheckInterval !== null &&
            this.runningTasks === 0 &&
            this.queue.size() === 0) {
            clearInterval(this.windowCheckInterval);
            this.windowCheckInterval = null;
            // this.debug("Timer stopped");
        }
    }
    resetWindowState() {
        this.windowStartTime = Date.now();
        this.tasksInitiatedInWindow = 0;
    }
    destroy() {
        if (this.windowCheckInterval !== null) {
            clearInterval(this.windowCheckInterval);
            this.windowCheckInterval = null;
        }
    }
}
exports.RateLimitedTaskScheduler = RateLimitedTaskScheduler;
//# sourceMappingURL=data:application/json;base64,