"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestBuilder = void 0;
class RequestBuilder {
    constructor(body) {
        this.request = {
            header: {
                timestamp: Date.now(),
                requestId: crypto.randomUUID(),
                requesterAddress: "",
                requestType: "",
                requiresResponse: true,
            },
            body,
        };
    }
    // Basic header setters
    setRequesterAddress(address) {
        this.request.header.requesterAddress = address;
        return this;
    }
    setRecipientAddress(address) {
        this.request.header.recipientAddress = address;
        return this;
    }
    setRequestType(type) {
        this.request.header.requestType = type;
        return this;
    }
    setSessionId(sessionId) {
        this.request.header.sessionId = sessionId;
        return this;
    }
    setRequiresResponse(requires) {
        this.request.header.requiresResponse = requires;
        return this;
    }
    // Authentication related setters
    setAuthToken(token) {
        this.request.header.authToken = token;
        return this;
    }
    setRefreshToken(token) {
        this.request.header.refreshToken = token;
        return this;
    }
    // Auth metadata manipulation
    initAuthMetadata() {
        if (!this.request.header.authMetadata) {
            this.request.header.authMetadata = {};
        }
        return this;
    }
    setRoles(roles) {
        this.initAuthMetadata();
        this.request.header.authMetadata.roles = roles;
        return this;
    }
    addRole(role) {
        this.initAuthMetadata();
        const roles = this.request.header.authMetadata.roles || [];
        if (!roles.includes(role)) {
            roles.push(role);
        }
        this.request.header.authMetadata.roles = roles;
        return this;
    }
    setPermissions(permissions) {
        this.initAuthMetadata();
        this.request.header.authMetadata.permissions = permissions;
        return this;
    }
    addPermission(permission) {
        this.initAuthMetadata();
        const permissions = this.request.header.authMetadata.permissions || [];
        if (!permissions.includes(permission)) {
            permissions.push(permission);
        }
        this.request.header.authMetadata.permissions = permissions;
        return this;
    }
    setScope(scope) {
        this.initAuthMetadata();
        this.request.header.authMetadata.scope = scope;
        return this;
    }
    setAuthMetadataField(key, value) {
        this.initAuthMetadata();
        this.request.header.authMetadata[key] = value;
        return this;
    }
    // Timestamp manipulation
    setTimestamp(timestamp) {
        this.request.header.timestamp = timestamp;
        return this;
    }
    updateTimestamp() {
        this.request.header.timestamp = Date.now();
        return this;
    }
    // Request ID manipulation
    setRequestId(id) {
        this.request.header.requestId = id;
        return this;
    }
    regenerateRequestId() {
        this.request.header.requestId = crypto.randomUUID();
        return this;
    }
    // Body manipulation
    setBody(body) {
        this.request.body = body;
        return this;
    }
    updateBody(updater) {
        this.request.body = updater(this.request.body);
        return this;
    }
    // Build methods
    build() {
        return { ...this.request };
    }
    clone() {
        const builder = new RequestBuilder(this.request.body);
        builder.request = JSON.parse(JSON.stringify(this.request));
        return builder;
    }
    // Static creators
    static from(request) {
        const builder = new RequestBuilder(request.body);
        builder.request = JSON.parse(JSON.stringify(request));
        return builder;
    }
    static createSimple(requesterAddress, requestType, body, recipientAddress) {
        return new RequestBuilder(body)
            .setRequesterAddress(requesterAddress)
            .setRequestType(requestType)
            .setRecipientAddress(recipientAddress || "")
            .build();
    }
}
exports.RequestBuilder = RequestBuilder;
//# sourceMappingURL=data:application/json;base64,