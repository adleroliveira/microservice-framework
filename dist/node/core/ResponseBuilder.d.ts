import { IRequest, IResponse } from "../interfaces";
export declare class ResponseBuilder<T> {
    private response;
    constructor(request: IRequest<any>, data: T);
    setResponderAddress(address: string): this;
    setNewAuthToken(token: string): this;
    setNewRefreshToken(token: string): this;
    initAuthMetadata(): this;
    setRoles(roles: string[]): this;
    addRole(role: string): this;
    setPermissions(permissions: string[]): this;
    addPermission(permission: string): this;
    setScope(scope: string[]): this;
    setAuthMetadataField(key: string, value: unknown): this;
    setSuccess(success: boolean): this;
    setError(error: Error): this;
    setAuthenticationRequired(required: boolean): this;
    setAuthenticationError(error: string): this;
    setSessionExpired(expired: boolean): this;
    setTimestamp(timestamp: number): this;
    updateTimestamp(): this;
    setData(data: T): this;
    updateData(updater: (data: T) => T): this;
    build(): IResponse<T>;
    clone(): ResponseBuilder<T>;
    static from<T>(response: IResponse<T>): ResponseBuilder<T>;
    static createSuccess<T>(request: IRequest<any>, responderAddress: string, data: T): IResponse<T>;
    static createError<T>(request: IRequest<any>, responderAddress: string, error: Error): IResponse<T>;
    static createAuthError<T>(request: IRequest<any>, responderAddress: string, errorMessage: string): IResponse<T>;
    static createSessionExpired<T>(request: IRequest<any>, responderAddress: string): IResponse<T>;
}
