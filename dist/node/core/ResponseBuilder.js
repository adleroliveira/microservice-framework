"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseBuilder = void 0;
class ResponseBuilder {
    constructor(request, data) {
        this.response = {
            requestHeader: { ...request.header },
            responseHeader: {
                responderAddress: "",
                timestamp: Date.now(),
            },
            body: {
                data,
                success: true,
                error: null,
            },
        };
    }
    // Basic header setters
    setResponderAddress(address) {
        this.response.responseHeader.responderAddress = address;
        return this;
    }
    // Authentication token management
    setNewAuthToken(token) {
        this.response.responseHeader.newAuthToken = token;
        return this;
    }
    setNewRefreshToken(token) {
        this.response.responseHeader.newRefreshToken = token;
        return this;
    }
    // Auth metadata manipulation
    initAuthMetadata() {
        if (!this.response.responseHeader.authMetadata) {
            this.response.responseHeader.authMetadata = {};
        }
        return this;
    }
    setRoles(roles) {
        this.initAuthMetadata();
        this.response.responseHeader.authMetadata.roles = roles;
        return this;
    }
    addRole(role) {
        this.initAuthMetadata();
        const roles = this.response.responseHeader.authMetadata.roles || [];
        if (!roles.includes(role)) {
            roles.push(role);
        }
        this.response.responseHeader.authMetadata.roles = roles;
        return this;
    }
    setPermissions(permissions) {
        this.initAuthMetadata();
        this.response.responseHeader.authMetadata.permissions = permissions;
        return this;
    }
    addPermission(permission) {
        this.initAuthMetadata();
        const permissions = this.response.responseHeader.authMetadata.permissions || [];
        if (!permissions.includes(permission)) {
            permissions.push(permission);
        }
        this.response.responseHeader.authMetadata.permissions = permissions;
        return this;
    }
    setScope(scope) {
        this.initAuthMetadata();
        this.response.responseHeader.authMetadata.scope = scope;
        return this;
    }
    setAuthMetadataField(key, value) {
        this.initAuthMetadata();
        this.response.responseHeader.authMetadata[key] = value;
        return this;
    }
    // Response status management
    setSuccess(success) {
        this.response.body.success = success;
        return this;
    }
    setError(error) {
        this.response.body.error = error;
        this.response.body.success = false;
        return this;
    }
    setAuthenticationRequired(required) {
        this.response.body.authenticationRequired = required;
        return this;
    }
    setAuthenticationError(error) {
        this.response.body.authenticationError = error;
        this.response.body.success = false;
        return this;
    }
    setSessionExpired(expired) {
        this.response.body.sessionExpired = expired;
        return this;
    }
    // Timestamp manipulation
    setTimestamp(timestamp) {
        this.response.responseHeader.timestamp = timestamp;
        return this;
    }
    updateTimestamp() {
        this.response.responseHeader.timestamp = Date.now();
        return this;
    }
    // Data manipulation
    setData(data) {
        this.response.body.data = data;
        return this;
    }
    updateData(updater) {
        this.response.body.data = updater(this.response.body.data);
        return this;
    }
    // Build methods
    build() {
        return { ...this.response };
    }
    clone() {
        const builder = new ResponseBuilder({ header: this.response.requestHeader, body: {} }, this.response.body.data);
        builder.response = JSON.parse(JSON.stringify(this.response));
        return builder;
    }
    // Static creators
    static from(response) {
        const builder = new ResponseBuilder({ header: response.requestHeader, body: {} }, response.body.data);
        builder.response = JSON.parse(JSON.stringify(response));
        return builder;
    }
    // Common response creators
    static createSuccess(request, responderAddress, data) {
        return new ResponseBuilder(request, data)
            .setResponderAddress(responderAddress)
            .setSuccess(true)
            .build();
    }
    static createError(request, responderAddress, error) {
        return new ResponseBuilder(request, null)
            .setResponderAddress(responderAddress)
            .setError(error)
            .build();
    }
    static createAuthError(request, responderAddress, errorMessage) {
        return new ResponseBuilder(request, null)
            .setResponderAddress(responderAddress)
            .setAuthenticationRequired(true)
            .setAuthenticationError(errorMessage)
            .build();
    }
    static createSessionExpired(request, responderAddress) {
        return new ResponseBuilder(request, null)
            .setResponderAddress(responderAddress)
            .setSessionExpired(true)
            .setAuthenticationRequired(true)
            .build();
    }
}
exports.ResponseBuilder = ResponseBuilder;
//# sourceMappingURL=data:application/json;base64,