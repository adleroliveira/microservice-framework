"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryPubSubConsumer = exports.PubSubConsumerClient = void 0;
const PubSubConsumer_1 = require("../../core/PubSubConsumer");
class PubSubConsumerClient {
    constructor() {
        this.channels = new Map();
    }
    async subscribe(channel) {
        if (!this.channels.has(channel)) {
            this.channels.set(channel, new Set());
        }
    }
    async unsubscribe(channel) {
        this.channels.delete(channel);
    }
    async publish(channel, message) {
        if (this.channels.has(channel)) {
            for (const callback of this.channels.get(channel)) {
                callback(message);
            }
        }
    }
    addCallback(channel, callback) {
        if (!this.channels.has(channel)) {
            this.channels.set(channel, new Set());
        }
        this.channels.get(channel).add(callback);
    }
    removeCallback(channel, callback) {
        if (this.channels.has(channel)) {
            this.channels.get(channel).delete(callback);
            if (this.channels.get(channel).size === 0) {
                this.channels.delete(channel);
            }
        }
    }
}
exports.PubSubConsumerClient = PubSubConsumerClient;
class MemoryPubSubConsumer extends PubSubConsumer_1.PubSubConsumer {
    constructor(client, options) {
        super(client, options);
        this.client = client;
        this.callbacks = new Map();
    }
    async subscribe(channel, callback) {
        await this.client.subscribe(channel);
        this.client.addCallback(channel, callback);
        if (!this.callbacks.has(channel)) {
            this.callbacks.set(channel, new Set());
        }
        this.callbacks.get(channel).add(callback);
    }
    async unsubscribe(channel) {
        if (this.callbacks.has(channel)) {
            for (const callback of this.callbacks.get(channel)) {
                this.client.removeCallback(channel, callback);
            }
            this.callbacks.delete(channel);
        }
        await this.client.unsubscribe(channel);
    }
    async publish(channel, message) {
        await this.client.publish(channel, message);
    }
}
exports.MemoryPubSubConsumer = MemoryPubSubConsumer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHViU3ViQ29uc3VtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZXhhbXBsZXMvYmFja2VuZC9QdWJTdWJDb25zdW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFHbUM7QUFHbkMsTUFBYSxvQkFBb0I7SUFHL0I7UUFGUSxhQUFRLEdBQTZDLElBQUksR0FBRyxFQUFFLENBQUM7SUFFeEQsQ0FBQztJQUVoQixLQUFLLENBQUMsU0FBUyxDQUFDLE9BQWU7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4QyxDQUFDO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBZTtRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFlLEVBQUUsT0FBWTtRQUN6QyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDL0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFDO2dCQUNuRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQWUsRUFBRSxRQUFnQztRQUMzRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGNBQWMsQ0FBQyxPQUFlLEVBQUUsUUFBZ0M7UUFDOUQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM3QyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUF0Q0Qsb0RBc0NDO0FBSUQsTUFBYSxvQkFBcUIsU0FBUSwrQkFBYztJQUd0RCxZQUNZLE1BQTRCLEVBQ3RDLE9BQW9DO1FBRXBDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFIYixXQUFNLEdBQU4sTUFBTSxDQUFzQjtRQUhoQyxjQUFTLEdBQTZDLElBQUksR0FBRyxFQUFFLENBQUM7SUFPeEUsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTLENBQ2IsT0FBZSxFQUNmLFFBQWdDO1FBRWhDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQy9CLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUM7Z0JBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNoRCxDQUFDO1lBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUNELE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZSxFQUFFLE9BQVk7UUFDekMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUNGO0FBbkNELG9EQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFB1YlN1YkNvbnN1bWVyLFxuICBQdWJTdWJDb25zdW1lck9wdGlvbnMsXG59IGZyb20gXCIuLi8uLi9jb3JlL1B1YlN1YkNvbnN1bWVyXCI7XG5pbXBvcnQgeyBJUHViU3ViQ2xpZW50IH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGNsYXNzIFB1YlN1YkNvbnN1bWVyQ2xpZW50IGltcGxlbWVudHMgSVB1YlN1YkNsaWVudCB7XG4gIHByaXZhdGUgY2hhbm5lbHM6IE1hcDxzdHJpbmcsIFNldDwobWVzc2FnZTogYW55KSA9PiB2b2lkPj4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGFzeW5jIHN1YnNjcmliZShjaGFubmVsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuY2hhbm5lbHMuaGFzKGNoYW5uZWwpKSB7XG4gICAgICB0aGlzLmNoYW5uZWxzLnNldChjaGFubmVsLCBuZXcgU2V0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVuc3Vic2NyaWJlKGNoYW5uZWw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuY2hhbm5lbHMuZGVsZXRlKGNoYW5uZWwpO1xuICB9XG5cbiAgYXN5bmMgcHVibGlzaChjaGFubmVsOiBzdHJpbmcsIG1lc3NhZ2U6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLmNoYW5uZWxzLmhhcyhjaGFubmVsKSkge1xuICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLmNoYW5uZWxzLmdldChjaGFubmVsKSEpIHtcbiAgICAgICAgY2FsbGJhY2sobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYWRkQ2FsbGJhY2soY2hhbm5lbDogc3RyaW5nLCBjYWxsYmFjazogKG1lc3NhZ2U6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5jaGFubmVscy5oYXMoY2hhbm5lbCkpIHtcbiAgICAgIHRoaXMuY2hhbm5lbHMuc2V0KGNoYW5uZWwsIG5ldyBTZXQoKSk7XG4gICAgfVxuICAgIHRoaXMuY2hhbm5lbHMuZ2V0KGNoYW5uZWwpIS5hZGQoY2FsbGJhY2spO1xuICB9XG5cbiAgcmVtb3ZlQ2FsbGJhY2soY2hhbm5lbDogc3RyaW5nLCBjYWxsYmFjazogKG1lc3NhZ2U6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNoYW5uZWxzLmhhcyhjaGFubmVsKSkge1xuICAgICAgdGhpcy5jaGFubmVscy5nZXQoY2hhbm5lbCkhLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICBpZiAodGhpcy5jaGFubmVscy5nZXQoY2hhbm5lbCkhLnNpemUgPT09IDApIHtcbiAgICAgICAgdGhpcy5jaGFubmVscy5kZWxldGUoY2hhbm5lbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBNZW1vcnlQdWJTdWJDb25zdW1lck9wdGlvbnMgZXh0ZW5kcyBQdWJTdWJDb25zdW1lck9wdGlvbnMge31cblxuZXhwb3J0IGNsYXNzIE1lbW9yeVB1YlN1YkNvbnN1bWVyIGV4dGVuZHMgUHViU3ViQ29uc3VtZXIge1xuICBwcml2YXRlIGNhbGxiYWNrczogTWFwPHN0cmluZywgU2V0PChtZXNzYWdlOiBhbnkpID0+IHZvaWQ+PiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY2xpZW50OiBQdWJTdWJDb25zdW1lckNsaWVudCxcbiAgICBvcHRpb25zOiBNZW1vcnlQdWJTdWJDb25zdW1lck9wdGlvbnNcbiAgKSB7XG4gICAgc3VwZXIoY2xpZW50LCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIHN1YnNjcmliZShcbiAgICBjaGFubmVsOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IChtZXNzYWdlOiBhbnkpID0+IHZvaWRcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5jbGllbnQuc3Vic2NyaWJlKGNoYW5uZWwpO1xuICAgIHRoaXMuY2xpZW50LmFkZENhbGxiYWNrKGNoYW5uZWwsIGNhbGxiYWNrKTtcbiAgICBpZiAoIXRoaXMuY2FsbGJhY2tzLmhhcyhjaGFubmVsKSkge1xuICAgICAgdGhpcy5jYWxsYmFja3Muc2V0KGNoYW5uZWwsIG5ldyBTZXQoKSk7XG4gICAgfVxuICAgIHRoaXMuY2FsbGJhY2tzLmdldChjaGFubmVsKSEuYWRkKGNhbGxiYWNrKTtcbiAgfVxuXG4gIGFzeW5jIHVuc3Vic2NyaWJlKGNoYW5uZWw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLmNhbGxiYWNrcy5oYXMoY2hhbm5lbCkpIHtcbiAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy5jYWxsYmFja3MuZ2V0KGNoYW5uZWwpISkge1xuICAgICAgICB0aGlzLmNsaWVudC5yZW1vdmVDYWxsYmFjayhjaGFubmVsLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICB0aGlzLmNhbGxiYWNrcy5kZWxldGUoY2hhbm5lbCk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuY2xpZW50LnVuc3Vic2NyaWJlKGNoYW5uZWwpO1xuICB9XG5cbiAgYXN5bmMgcHVibGlzaChjaGFubmVsOiBzdHJpbmcsIG1lc3NhZ2U6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuY2xpZW50LnB1Ymxpc2goY2hhbm5lbCwgbWVzc2FnZSk7XG4gIH1cbn1cbiJdfQ==