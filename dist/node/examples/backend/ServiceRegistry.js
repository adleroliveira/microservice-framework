"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryServiceRegistry = void 0;
const logging_1 = require("../../logging");
class MemoryServiceRegistry extends logging_1.Loggable {
    constructor() {
        super();
        this.services = new Map();
    }
    async registerService(serviceId, nodeId, load) {
        if (!this.services.has(serviceId)) {
            this.services.set(serviceId, { nodes: new Map() });
        }
        this.services.get(serviceId).nodes.set(nodeId, { nodeId, load });
    }
    async deregisterService(serviceId, nodeId) {
        const serviceInfo = this.services.get(serviceId);
        if (serviceInfo) {
            serviceInfo.nodes.delete(nodeId);
            this.warn(`Deregistered node ${nodeId} from service ${serviceId}`);
            if (serviceInfo.nodes.size === 0) {
                this.services.delete(serviceId);
            }
        }
    }
    async updateServiceLoad(serviceId, nodeId, load) {
        const serviceInfo = this.services.get(serviceId);
        if (serviceInfo && serviceInfo.nodes.has(nodeId)) {
            serviceInfo.nodes.get(nodeId).load = load;
            // this.debug(
            //   `Updated load for service ${serviceId} on node ${nodeId} to ${load}`
            // );
        }
    }
    async getLeastLoadedNode(serviceId) {
        const serviceInfo = this.services.get(serviceId);
        if (!serviceInfo || serviceInfo.nodes.size === 0) {
            return null;
        }
        let leastLoadedNode = null;
        for (const node of serviceInfo.nodes.values()) {
            if (!leastLoadedNode || node.load < leastLoadedNode.load) {
                leastLoadedNode = node;
            }
        }
        return leastLoadedNode.nodeId;
    }
    async getAllNodes(serviceId) {
        const serviceInfo = this.services.get(serviceId);
        if (!serviceInfo) {
            return [];
        }
        return Array.from(serviceInfo.nodes.values());
    }
    async getOnlineServices() {
        return Array.from(this.services.keys());
    }
    async isServiceOnline(serviceId) {
        return this.services.has(serviceId);
    }
}
exports.MemoryServiceRegistry = MemoryServiceRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZVJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2V4YW1wbGVzL2JhY2tlbmQvU2VydmljZVJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJDQUF5QztBQVd6QyxNQUFhLHFCQUNYLFNBQVEsa0JBQVE7SUFLaEI7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWUsQ0FDbkIsU0FBaUIsRUFDakIsTUFBYyxFQUNkLElBQVk7UUFFWixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxTQUFpQixFQUFFLE1BQWM7UUFDdkQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakQsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUNoQixXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixNQUFNLGlCQUFpQixTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ25FLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2xDLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxpQkFBaUIsQ0FDckIsU0FBaUIsRUFDakIsTUFBYyxFQUNkLElBQVk7UUFFWixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqRCxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ2pELFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBRSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDM0MsY0FBYztZQUNkLHlFQUF5RTtZQUN6RSxLQUFLO1FBQ1AsQ0FBQztJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsa0JBQWtCLENBQUMsU0FBaUI7UUFDeEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNqRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxJQUFJLGVBQWUsR0FBdUIsSUFBSSxDQUFDO1FBQy9DLEtBQUssTUFBTSxJQUFJLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO1lBQzlDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3pELGVBQWUsR0FBRyxJQUFJLENBQUM7WUFDekIsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLGVBQWdCLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUNmLFNBQWlCO1FBRWpCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCO1FBQ3JCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBaUI7UUFDckMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0Y7QUE5RUQsc0RBOEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVNlcnZpY2VSZWdpc3RyeSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzXCI7XG5pbXBvcnQgeyBMb2dnYWJsZSB9IGZyb20gXCIuLi8uLi9sb2dnaW5nXCI7XG5cbmludGVyZmFjZSBTZXJ2aWNlTm9kZSB7XG4gIG5vZGVJZDogc3RyaW5nO1xuICBsb2FkOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBTZXJ2aWNlSW5mbyB7XG4gIG5vZGVzOiBNYXA8c3RyaW5nLCBTZXJ2aWNlTm9kZT47XG59XG5cbmV4cG9ydCBjbGFzcyBNZW1vcnlTZXJ2aWNlUmVnaXN0cnlcbiAgZXh0ZW5kcyBMb2dnYWJsZVxuICBpbXBsZW1lbnRzIElTZXJ2aWNlUmVnaXN0cnlcbntcbiAgcHJpdmF0ZSBzZXJ2aWNlczogTWFwPHN0cmluZywgU2VydmljZUluZm8+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zZXJ2aWNlcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGFzeW5jIHJlZ2lzdGVyU2VydmljZShcbiAgICBzZXJ2aWNlSWQ6IHN0cmluZyxcbiAgICBub2RlSWQ6IHN0cmluZyxcbiAgICBsb2FkOiBudW1iZXJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLnNlcnZpY2VzLmhhcyhzZXJ2aWNlSWQpKSB7XG4gICAgICB0aGlzLnNlcnZpY2VzLnNldChzZXJ2aWNlSWQsIHsgbm9kZXM6IG5ldyBNYXAoKSB9KTtcbiAgICB9XG4gICAgdGhpcy5zZXJ2aWNlcy5nZXQoc2VydmljZUlkKSEubm9kZXMuc2V0KG5vZGVJZCwgeyBub2RlSWQsIGxvYWQgfSk7XG4gIH1cblxuICBhc3luYyBkZXJlZ2lzdGVyU2VydmljZShzZXJ2aWNlSWQ6IHN0cmluZywgbm9kZUlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzZXJ2aWNlSW5mbyA9IHRoaXMuc2VydmljZXMuZ2V0KHNlcnZpY2VJZCk7XG4gICAgaWYgKHNlcnZpY2VJbmZvKSB7XG4gICAgICBzZXJ2aWNlSW5mby5ub2Rlcy5kZWxldGUobm9kZUlkKTtcbiAgICAgIHRoaXMud2FybihgRGVyZWdpc3RlcmVkIG5vZGUgJHtub2RlSWR9IGZyb20gc2VydmljZSAke3NlcnZpY2VJZH1gKTtcbiAgICAgIGlmIChzZXJ2aWNlSW5mby5ub2Rlcy5zaXplID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2VydmljZXMuZGVsZXRlKHNlcnZpY2VJZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlU2VydmljZUxvYWQoXG4gICAgc2VydmljZUlkOiBzdHJpbmcsXG4gICAgbm9kZUlkOiBzdHJpbmcsXG4gICAgbG9hZDogbnVtYmVyXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlcnZpY2VJbmZvID0gdGhpcy5zZXJ2aWNlcy5nZXQoc2VydmljZUlkKTtcbiAgICBpZiAoc2VydmljZUluZm8gJiYgc2VydmljZUluZm8ubm9kZXMuaGFzKG5vZGVJZCkpIHtcbiAgICAgIHNlcnZpY2VJbmZvLm5vZGVzLmdldChub2RlSWQpIS5sb2FkID0gbG9hZDtcbiAgICAgIC8vIHRoaXMuZGVidWcoXG4gICAgICAvLyAgIGBVcGRhdGVkIGxvYWQgZm9yIHNlcnZpY2UgJHtzZXJ2aWNlSWR9IG9uIG5vZGUgJHtub2RlSWR9IHRvICR7bG9hZH1gXG4gICAgICAvLyApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldExlYXN0TG9hZGVkTm9kZShzZXJ2aWNlSWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgIGNvbnN0IHNlcnZpY2VJbmZvID0gdGhpcy5zZXJ2aWNlcy5nZXQoc2VydmljZUlkKTtcbiAgICBpZiAoIXNlcnZpY2VJbmZvIHx8IHNlcnZpY2VJbmZvLm5vZGVzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgbGVhc3RMb2FkZWROb2RlOiBTZXJ2aWNlTm9kZSB8IG51bGwgPSBudWxsO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBzZXJ2aWNlSW5mby5ub2Rlcy52YWx1ZXMoKSkge1xuICAgICAgaWYgKCFsZWFzdExvYWRlZE5vZGUgfHwgbm9kZS5sb2FkIDwgbGVhc3RMb2FkZWROb2RlLmxvYWQpIHtcbiAgICAgICAgbGVhc3RMb2FkZWROb2RlID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlYXN0TG9hZGVkTm9kZSEubm9kZUlkO1xuICB9XG5cbiAgYXN5bmMgZ2V0QWxsTm9kZXMoXG4gICAgc2VydmljZUlkOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxBcnJheTx7IG5vZGVJZDogc3RyaW5nOyBsb2FkOiBudW1iZXIgfT4+IHtcbiAgICBjb25zdCBzZXJ2aWNlSW5mbyA9IHRoaXMuc2VydmljZXMuZ2V0KHNlcnZpY2VJZCk7XG4gICAgaWYgKCFzZXJ2aWNlSW5mbykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbShzZXJ2aWNlSW5mby5ub2Rlcy52YWx1ZXMoKSk7XG4gIH1cblxuICBhc3luYyBnZXRPbmxpbmVTZXJ2aWNlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5zZXJ2aWNlcy5rZXlzKCkpO1xuICB9XG5cbiAgYXN5bmMgaXNTZXJ2aWNlT25saW5lKHNlcnZpY2VJZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZXMuaGFzKHNlcnZpY2VJZCk7XG4gIH1cbn1cbiJdfQ==