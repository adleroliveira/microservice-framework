"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServerRunner_1 = require("../ServerRunner");
const ExampleWebServer_1 = require("./microservices/ExampleWebServer");
const ExampleWebSocketServer_1 = require("./microservices/ExampleWebSocketServer");
const Backend_1 = require("../minimal/Backend");
const logging_1 = require("../logging");
const path_1 = __importDefault(require("path"));
const minimal_1 = require("../minimal");
const namespace = "example";
const logStrategy = new logging_1.ConsoleStrategy();
const backend = new Backend_1.Backend();
const authProvider = new minimal_1.InMemoryAuthProvider();
const sessionStore = new minimal_1.InMemorySessionStore();
const exampleWebServer = new ExampleWebServer_1.ExampleWebServer(backend, {
    namespace,
    logStrategy,
    serviceId: "webservice",
    port: 8082,
    staticDir: path_1.default.join(path_1.default.resolve(__dirname, "../.."), "/public"),
});
const exampleWebSocketServer = new ExampleWebSocketServer_1.ExampleWebSocketServer(backend, {
    namespace,
    logStrategy,
    serviceId: "websocket",
    path: "/ws",
    port: 8083,
    requiresAuthentication: true,
    authProvider,
    sessionStore,
});
const server = new ServerRunner_1.ServerRunner();
server.registerService(exampleWebServer);
server.registerService(exampleWebSocketServer);
authProvider.addUser("root", "password").then(() => {
    console.log("Root user created");
    server.start();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V4YW1wbGVzL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUErQztBQUMvQyx1RUFBb0U7QUFDcEUsbUZBQWdGO0FBQ2hGLGdEQUE2QztBQUM3Qyx3Q0FBNkM7QUFDN0MsZ0RBQXdCO0FBQ3hCLHdDQUF3RTtBQUV4RSxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDNUIsTUFBTSxXQUFXLEdBQUcsSUFBSSx5QkFBZSxFQUFFLENBQUM7QUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7QUFDOUIsTUFBTSxZQUFZLEdBQUcsSUFBSSw4QkFBb0IsRUFBRSxDQUFDO0FBQ2hELE1BQU0sWUFBWSxHQUFHLElBQUksOEJBQW9CLEVBQUUsQ0FBQztBQUVoRCxNQUFNLGdCQUFnQixHQUFHLElBQUksbUNBQWdCLENBQUMsT0FBTyxFQUFFO0lBQ3JELFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUyxFQUFFLFlBQVk7SUFDdkIsSUFBSSxFQUFFLElBQUk7SUFDVixTQUFTLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRSxTQUFTLENBQUM7Q0FDbEUsQ0FBQyxDQUFDO0FBRUgsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLCtDQUFzQixDQUFDLE9BQU8sRUFBRTtJQUNqRSxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLElBQUksRUFBRSxLQUFLO0lBQ1gsSUFBSSxFQUFFLElBQUk7SUFDVixzQkFBc0IsRUFBRSxJQUFJO0lBQzVCLFlBQVk7SUFDWixZQUFZO0NBQ2IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxNQUFNLEdBQUcsSUFBSSwyQkFBWSxFQUFFLENBQUM7QUFDbEMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxlQUFlLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUUvQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJ2ZXJSdW5uZXIgfSBmcm9tIFwiLi4vU2VydmVyUnVubmVyXCI7XG5pbXBvcnQgeyBFeGFtcGxlV2ViU2VydmVyIH0gZnJvbSBcIi4vbWljcm9zZXJ2aWNlcy9FeGFtcGxlV2ViU2VydmVyXCI7XG5pbXBvcnQgeyBFeGFtcGxlV2ViU29ja2V0U2VydmVyIH0gZnJvbSBcIi4vbWljcm9zZXJ2aWNlcy9FeGFtcGxlV2ViU29ja2V0U2VydmVyXCI7XG5pbXBvcnQgeyBCYWNrZW5kIH0gZnJvbSBcIi4uL21pbmltYWwvQmFja2VuZFwiO1xuaW1wb3J0IHsgQ29uc29sZVN0cmF0ZWd5IH0gZnJvbSBcIi4uL2xvZ2dpbmdcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBJbk1lbW9yeUF1dGhQcm92aWRlciwgSW5NZW1vcnlTZXNzaW9uU3RvcmUgfSBmcm9tIFwiLi4vbWluaW1hbFwiO1xuXG5jb25zdCBuYW1lc3BhY2UgPSBcImV4YW1wbGVcIjtcbmNvbnN0IGxvZ1N0cmF0ZWd5ID0gbmV3IENvbnNvbGVTdHJhdGVneSgpO1xuY29uc3QgYmFja2VuZCA9IG5ldyBCYWNrZW5kKCk7XG5jb25zdCBhdXRoUHJvdmlkZXIgPSBuZXcgSW5NZW1vcnlBdXRoUHJvdmlkZXIoKTtcbmNvbnN0IHNlc3Npb25TdG9yZSA9IG5ldyBJbk1lbW9yeVNlc3Npb25TdG9yZSgpO1xuXG5jb25zdCBleGFtcGxlV2ViU2VydmVyID0gbmV3IEV4YW1wbGVXZWJTZXJ2ZXIoYmFja2VuZCwge1xuICBuYW1lc3BhY2UsXG4gIGxvZ1N0cmF0ZWd5LFxuICBzZXJ2aWNlSWQ6IFwid2Vic2VydmljZVwiLFxuICBwb3J0OiA4MDgyLFxuICBzdGF0aWNEaXI6IHBhdGguam9pbihwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4uLy4uXCIpLCBcIi9wdWJsaWNcIiksXG59KTtcblxuY29uc3QgZXhhbXBsZVdlYlNvY2tldFNlcnZlciA9IG5ldyBFeGFtcGxlV2ViU29ja2V0U2VydmVyKGJhY2tlbmQsIHtcbiAgbmFtZXNwYWNlLFxuICBsb2dTdHJhdGVneSxcbiAgc2VydmljZUlkOiBcIndlYnNvY2tldFwiLFxuICBwYXRoOiBcIi93c1wiLFxuICBwb3J0OiA4MDgzLFxuICByZXF1aXJlc0F1dGhlbnRpY2F0aW9uOiB0cnVlLFxuICBhdXRoUHJvdmlkZXIsXG4gIHNlc3Npb25TdG9yZSxcbn0pO1xuXG5jb25zdCBzZXJ2ZXIgPSBuZXcgU2VydmVyUnVubmVyKCk7XG5zZXJ2ZXIucmVnaXN0ZXJTZXJ2aWNlKGV4YW1wbGVXZWJTZXJ2ZXIpO1xuc2VydmVyLnJlZ2lzdGVyU2VydmljZShleGFtcGxlV2ViU29ja2V0U2VydmVyKTtcblxuYXV0aFByb3ZpZGVyLmFkZFVzZXIoXCJyb290XCIsIFwicGFzc3dvcmRcIikudGhlbigoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiUm9vdCB1c2VyIGNyZWF0ZWRcIik7XG4gIHNlcnZlci5zdGFydCgpO1xufSk7XG4iXX0=