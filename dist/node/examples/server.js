"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServerRunner_1 = require("../ServerRunner");
const ExampleWebServer_1 = require("./microservices/ExampleWebServer");
const ExampleWebSocketServer_1 = require("./microservices/ExampleWebSocketServer");
const Backend_1 = require("../minimal/Backend");
const logging_1 = require("../logging");
const path_1 = __importDefault(require("path"));
const minimal_1 = require("../minimal");
const namespace = "example";
const logStrategy = new logging_1.ConsoleStrategy();
const backend = new Backend_1.Backend();
const authProvider = new minimal_1.FileAuthProvider();
const sessionStore = new minimal_1.FileSessionStore();
const exampleWebServer = new ExampleWebServer_1.ExampleWebServer(backend, {
    namespace,
    logStrategy,
    serviceId: "webservice",
    port: 8082,
    staticDir: path_1.default.join(path_1.default.resolve(__dirname, "../.."), "/public"),
});
const exampleWebSocketServer = new ExampleWebSocketServer_1.ExampleWebSocketServer(backend, {
    namespace,
    logStrategy,
    serviceId: "websocket",
    path: "/ws",
    port: 8083,
    requiresAuthentication: true,
    authProvider,
    sessionStore,
});
const server = new ServerRunner_1.ServerRunner();
server.registerService(exampleWebServer);
server.registerService(exampleWebSocketServer);
const main = async () => {
    await authProvider.initialize();
    await sessionStore.initialize();
    await authProvider.addUser("root", "password");
    server.start();
};
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V4YW1wbGVzL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUErQztBQUMvQyx1RUFBb0U7QUFDcEUsbUZBQWdGO0FBQ2hGLGdEQUE2QztBQUM3Qyx3Q0FBNkM7QUFDN0MsZ0RBQXdCO0FBQ3hCLHdDQUFnRTtBQUVoRSxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDNUIsTUFBTSxXQUFXLEdBQUcsSUFBSSx5QkFBZSxFQUFFLENBQUM7QUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7QUFDOUIsTUFBTSxZQUFZLEdBQUcsSUFBSSwwQkFBZ0IsRUFBRSxDQUFDO0FBQzVDLE1BQU0sWUFBWSxHQUFHLElBQUksMEJBQWdCLEVBQUUsQ0FBQztBQUU1QyxNQUFNLGdCQUFnQixHQUFHLElBQUksbUNBQWdCLENBQUMsT0FBTyxFQUFFO0lBQ3JELFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUyxFQUFFLFlBQVk7SUFDdkIsSUFBSSxFQUFFLElBQUk7SUFDVixTQUFTLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRSxTQUFTLENBQUM7Q0FDbEUsQ0FBQyxDQUFDO0FBRUgsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLCtDQUFzQixDQUFDLE9BQU8sRUFBRTtJQUNqRSxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLElBQUksRUFBRSxLQUFLO0lBQ1gsSUFBSSxFQUFFLElBQUk7SUFDVixzQkFBc0IsRUFBRSxJQUFJO0lBQzVCLFlBQVk7SUFDWixZQUFZO0NBQ2IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxNQUFNLEdBQUcsSUFBSSwyQkFBWSxFQUFFLENBQUM7QUFDbEMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxlQUFlLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUUvQyxNQUFNLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtJQUN0QixNQUFNLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNqQixDQUFDLENBQUE7QUFFRCxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcnZlclJ1bm5lciB9IGZyb20gXCIuLi9TZXJ2ZXJSdW5uZXJcIjtcbmltcG9ydCB7IEV4YW1wbGVXZWJTZXJ2ZXIgfSBmcm9tIFwiLi9taWNyb3NlcnZpY2VzL0V4YW1wbGVXZWJTZXJ2ZXJcIjtcbmltcG9ydCB7IEV4YW1wbGVXZWJTb2NrZXRTZXJ2ZXIgfSBmcm9tIFwiLi9taWNyb3NlcnZpY2VzL0V4YW1wbGVXZWJTb2NrZXRTZXJ2ZXJcIjtcbmltcG9ydCB7IEJhY2tlbmQgfSBmcm9tIFwiLi4vbWluaW1hbC9CYWNrZW5kXCI7XG5pbXBvcnQgeyBDb25zb2xlU3RyYXRlZ3kgfSBmcm9tIFwiLi4vbG9nZ2luZ1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IEZpbGVBdXRoUHJvdmlkZXIsIEZpbGVTZXNzaW9uU3RvcmUgfSBmcm9tIFwiLi4vbWluaW1hbFwiO1xuXG5jb25zdCBuYW1lc3BhY2UgPSBcImV4YW1wbGVcIjtcbmNvbnN0IGxvZ1N0cmF0ZWd5ID0gbmV3IENvbnNvbGVTdHJhdGVneSgpO1xuY29uc3QgYmFja2VuZCA9IG5ldyBCYWNrZW5kKCk7XG5jb25zdCBhdXRoUHJvdmlkZXIgPSBuZXcgRmlsZUF1dGhQcm92aWRlcigpO1xuY29uc3Qgc2Vzc2lvblN0b3JlID0gbmV3IEZpbGVTZXNzaW9uU3RvcmUoKTtcblxuY29uc3QgZXhhbXBsZVdlYlNlcnZlciA9IG5ldyBFeGFtcGxlV2ViU2VydmVyKGJhY2tlbmQsIHtcbiAgbmFtZXNwYWNlLFxuICBsb2dTdHJhdGVneSxcbiAgc2VydmljZUlkOiBcIndlYnNlcnZpY2VcIixcbiAgcG9ydDogODA4MixcbiAgc3RhdGljRGlyOiBwYXRoLmpvaW4ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuLi8uLlwiKSwgXCIvcHVibGljXCIpLFxufSk7XG5cbmNvbnN0IGV4YW1wbGVXZWJTb2NrZXRTZXJ2ZXIgPSBuZXcgRXhhbXBsZVdlYlNvY2tldFNlcnZlcihiYWNrZW5kLCB7XG4gIG5hbWVzcGFjZSxcbiAgbG9nU3RyYXRlZ3ksXG4gIHNlcnZpY2VJZDogXCJ3ZWJzb2NrZXRcIixcbiAgcGF0aDogXCIvd3NcIixcbiAgcG9ydDogODA4MyxcbiAgcmVxdWlyZXNBdXRoZW50aWNhdGlvbjogdHJ1ZSxcbiAgYXV0aFByb3ZpZGVyLFxuICBzZXNzaW9uU3RvcmUsXG59KTtcblxuY29uc3Qgc2VydmVyID0gbmV3IFNlcnZlclJ1bm5lcigpO1xuc2VydmVyLnJlZ2lzdGVyU2VydmljZShleGFtcGxlV2ViU2VydmVyKTtcbnNlcnZlci5yZWdpc3RlclNlcnZpY2UoZXhhbXBsZVdlYlNvY2tldFNlcnZlcik7XG5cbmNvbnN0IG1haW4gPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IGF1dGhQcm92aWRlci5pbml0aWFsaXplKCk7XG4gIGF3YWl0IHNlc3Npb25TdG9yZS5pbml0aWFsaXplKCk7XG4gIGF3YWl0IGF1dGhQcm92aWRlci5hZGRVc2VyKFwicm9vdFwiLCBcInBhc3N3b3JkXCIpO1xuICBzZXJ2ZXIuc3RhcnQoKTtcbn1cblxubWFpbigpOyJdfQ==