"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogStrategy = exports.LogLevel = void 0;
const uuid_1 = require("uuid");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class LogStrategy {
    constructor() { }
    async send(message, options) {
        const truncatedMessage = LogStrategy.truncateAndStringify(message, 0, this.MAX_STRING_LENGTH, this.MAX_DEPTH);
        const packagedMessage = {
            header: this.createRequestHeader(),
            body: truncatedMessage,
        };
        await this.sendPackaged(packagedMessage, options);
    }
    createRequestHeader() {
        return {
            timestamp: Date.now(),
            requestId: (0, uuid_1.v4)(),
            requesterAddress: "log-strategy",
            requestType: "LOG::MESSAGE",
        };
    }
    static truncateAndStringify(value, depth = 0, maxStringLength = 5000, maxDepth = 10) {
        if (depth > maxDepth) {
            return "[Object depth limit exceeded]";
        }
        if (value === undefined || value === null) {
            return value;
        }
        if (typeof value === "string") {
            return value.length > maxStringLength
                ? value.substring(0, maxStringLength) + "..."
                : value;
        }
        if (typeof value === "number" || typeof value === "boolean") {
            return value;
        }
        if (value instanceof Error) {
            return {
                name: value.name,
                message: this.truncateAndStringify(value.message),
                stack: this.truncateAndStringify(value.stack),
            };
        }
        if (this.isBufferOrArrayBufferView(value)) {
            return `[Binary data of length ${value.byteLength}]`;
        }
        if (Array.isArray(value)) {
            return value.map((item) => this.truncateAndStringify(item, depth + 1));
        }
        if (typeof value === "object") {
            const truncatedObject = {};
            for (const [key, prop] of Object.entries(value)) {
                truncatedObject[key] = this.truncateAndStringify(prop, depth + 1);
            }
            return truncatedObject;
        }
        return "[Unserializable data]";
    }
    static isBufferOrArrayBufferView(value) {
        // Check for Buffer in Node.js environment
        if (typeof Buffer !== "undefined" && Buffer.isBuffer(value)) {
            return true;
        }
        // Check for ArrayBuffer view in browser environment
        if (ArrayBuffer.isView(value)) {
            return true;
        }
        // Check if value is an ArrayBuffer
        if (value instanceof ArrayBuffer) {
            return true;
        }
        return false;
    }
}
exports.LogStrategy = LogStrategy;
//# sourceMappingURL=data:application/json;base64,