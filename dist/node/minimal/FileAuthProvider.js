"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileAuthProvider = void 0;
const FileStore_1 = require("./FileStore");
const utils_1 = require("src/utils");
class FileAuthProvider {
    constructor(dataDir = "./.auth-data") {
        this.users = new Map();
        this.tokens = new Map();
        this.store = new FileStore_1.FileStore(dataDir);
    }
    async initialize() {
        await this.store.initialize();
        // Load users from file
        const userData = await this.store.read("users");
        if (userData) {
            userData.users.forEach((user) => {
                this.users.set(user.username, user);
            });
        }
        // Load tokens from file
        const tokenData = await this.store.read("tokens");
        if (tokenData) {
            tokenData.tokens.forEach(([token, data]) => {
                this.tokens.set(token, {
                    ...data,
                    expiresAt: new Date(data.expiresAt),
                });
            });
        }
    }
    async persistUsers() {
        await this.store.write("users", {
            users: Array.from(this.users.values()),
        });
    }
    async persistTokens() {
        await this.store.write("tokens", {
            tokens: Array.from(this.tokens.entries()).map(([token, data]) => [
                token,
                {
                    ...data,
                    expiresAt: data.expiresAt.toISOString(),
                },
            ]),
        });
    }
    async addUser(username, password) {
        const userId = utils_1.CryptoUtil.generateToken().slice(0, 8);
        const passwordHash = await utils_1.CryptoUtil.hashPassword(password);
        this.users.set(username, {
            userId,
            username,
            passwordHash,
        });
        await this.persistUsers();
        return userId;
    }
    async authenticate(credentials) {
        const user = this.users.get(credentials.username);
        if (!user) {
            return { success: false, error: "User not found" };
        }
        const passwordHash = await utils_1.CryptoUtil.hashPassword(credentials.password);
        if (passwordHash !== user.passwordHash) {
            return { success: false, error: "Invalid password" };
        }
        const token = utils_1.CryptoUtil.generateToken();
        const refreshToken = utils_1.CryptoUtil.generateToken();
        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);
        this.tokens.set(token, {
            userId: user.userId,
            expiresAt,
            refreshToken,
        });
        await this.persistTokens();
        return {
            success: true,
            userId: user.userId,
            token,
            refreshToken,
            expiresAt,
            metadata: user.metadata,
        };
    }
    async validateToken(token) {
        const tokenData = this.tokens.get(token);
        if (!tokenData) {
            return { success: false, error: "Invalid token" };
        }
        if (tokenData.expiresAt < new Date()) {
            this.tokens.delete(token);
            await this.persistTokens();
            return { success: false, error: "Token expired" };
        }
        return {
            success: true,
            userId: tokenData.userId,
            token,
            expiresAt: tokenData.expiresAt,
        };
    }
    async refreshToken(refreshToken) {
        const tokenEntry = Array.from(this.tokens.entries()).find(([_, data]) => data.refreshToken === refreshToken);
        if (!tokenEntry) {
            return { success: false, error: "Invalid refresh token" };
        }
        const newToken = utils_1.CryptoUtil.generateToken();
        const newRefreshToken = utils_1.CryptoUtil.generateToken();
        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);
        this.tokens.delete(tokenEntry[0]);
        this.tokens.set(newToken, {
            userId: tokenEntry[1].userId,
            expiresAt,
            refreshToken: newRefreshToken,
        });
        await this.persistTokens();
        return {
            success: true,
            userId: tokenEntry[1].userId,
            token: newToken,
            refreshToken: newRefreshToken,
            expiresAt,
        };
    }
}
exports.FileAuthProvider = FileAuthProvider;
//# sourceMappingURL=data:application/json;base64,