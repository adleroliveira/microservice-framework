"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSessionStore = void 0;
const FileStore_1 = require("./FileStore");
const utils_1 = require("src/utils");
class FileSessionStore {
    constructor(dataDir = "./.session-data", cleanupIntervalMs = 60000) {
        this.sessions = new Map();
        this.store = new FileStore_1.FileStore(dataDir);
        this.cleanupInterval = setInterval(() => {
            this.cleanup();
        }, cleanupIntervalMs);
    }
    async initialize() {
        await this.store.initialize();
        // Load sessions from file
        const sessionData = await this.store.read("sessions");
        if (sessionData) {
            sessionData.sessions.forEach(([id, data]) => {
                this.sessions.set(id, {
                    ...data,
                    createdAt: new Date(data.createdAt),
                    expiresAt: new Date(data.expiresAt),
                    lastAccessedAt: new Date(data.lastAccessedAt),
                });
            });
        }
    }
    async persistSessions() {
        await this.store.write("sessions", {
            sessions: Array.from(this.sessions.entries()).map(([id, data]) => [
                id,
                {
                    ...data,
                    createdAt: data.createdAt.toISOString(),
                    expiresAt: data.expiresAt.toISOString(),
                    lastAccessedAt: data.lastAccessedAt.toISOString(),
                },
            ]),
        });
    }
    async create(sessionData) {
        const sessionId = sessionData.sessionId || utils_1.CryptoUtil.generateToken();
        this.sessions.set(sessionId, {
            ...sessionData,
            sessionId,
        });
        await this.persistSessions();
        return sessionId;
    }
    async get(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session)
            return null;
        if (new Date() > session.expiresAt) {
            await this.delete(sessionId);
            return null;
        }
        return session;
    }
    async update(sessionId, sessionData) {
        const existingSession = await this.get(sessionId);
        if (!existingSession)
            return false;
        this.sessions.set(sessionId, {
            ...existingSession,
            ...sessionData,
            lastAccessedAt: new Date(),
        });
        await this.persistSessions();
        return true;
    }
    async delete(sessionId) {
        const deleted = this.sessions.delete(sessionId);
        if (deleted) {
            await this.persistSessions();
        }
        return deleted;
    }
    async cleanup() {
        const now = new Date();
        let changed = false;
        for (const [sessionId, session] of this.sessions.entries()) {
            if (session.expiresAt < now) {
                this.sessions.delete(sessionId);
                changed = true;
            }
        }
        if (changed) {
            await this.persistSessions();
        }
    }
    destroy() {
        clearInterval(this.cleanupInterval);
    }
}
exports.FileSessionStore = FileSessionStore;
//# sourceMappingURL=data:application/json;base64,