"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSessionStore = void 0;
const FileStore_1 = require("./FileStore");
const utils_1 = require("../utils");
class FileSessionStore {
    constructor(dataDir = "./.session-data", cleanupIntervalMs = 60000) {
        this.sessions = new Map();
        this.store = new FileStore_1.FileStore(dataDir);
        this.cleanupInterval = setInterval(() => {
            this.cleanup();
        }, cleanupIntervalMs);
    }
    async initialize() {
        await this.store.initialize();
        await this.loadSessions();
        await this.performInitialCleanup();
    }
    async loadSessions() {
        // Load sessions from file
        const sessionData = await this.store.read("sessions");
        if (sessionData) {
            sessionData.sessions.forEach(([id, data]) => {
                this.sessions.set(id, {
                    ...data,
                    createdAt: new Date(data.createdAt),
                    expiresAt: new Date(data.expiresAt),
                    lastAccessedAt: new Date(data.lastAccessedAt),
                });
            });
        }
    }
    async performInitialCleanup() {
        const now = new Date();
        let changed = false;
        // Clean up expired sessions
        for (const [sessionId, session] of this.sessions.entries()) {
            if (session.expiresAt < now) {
                this.sessions.delete(sessionId);
                changed = true;
            }
        }
        // Clean up sessions that haven't been accessed in a long time (e.g., 30 days)
        const unusedThreshold = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        for (const [sessionId, session] of this.sessions.entries()) {
            if (session.lastAccessedAt < unusedThreshold) {
                this.sessions.delete(sessionId);
                changed = true;
            }
        }
        if (changed) {
            await this.persistSessions();
        }
    }
    async persistSessions() {
        await this.store.write("sessions", {
            sessions: Array.from(this.sessions.entries()).map(([id, data]) => [
                id,
                {
                    ...data,
                    createdAt: data.createdAt.toISOString(),
                    expiresAt: data.expiresAt.toISOString(),
                    lastAccessedAt: data.lastAccessedAt.toISOString(),
                },
            ]),
        });
    }
    async create(sessionData) {
        const sessionId = sessionData.sessionId || utils_1.CryptoUtil.generateToken();
        this.sessions.set(sessionId, {
            ...sessionData,
            sessionId,
        });
        await this.persistSessions();
        return sessionId;
    }
    async get(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session)
            return null;
        if (new Date() > session.expiresAt) {
            await this.delete(sessionId);
            return null;
        }
        return session;
    }
    async update(sessionId, sessionData) {
        const existingSession = await this.get(sessionId);
        if (!existingSession)
            return false;
        this.sessions.set(sessionId, {
            ...existingSession,
            ...sessionData,
            lastAccessedAt: new Date(),
        });
        await this.persistSessions();
        return true;
    }
    async delete(sessionId) {
        const deleted = this.sessions.delete(sessionId);
        if (deleted) {
            await this.persistSessions();
        }
        return deleted;
    }
    async cleanup() {
        const now = new Date();
        let changed = false;
        for (const [sessionId, session] of this.sessions.entries()) {
            if (session.expiresAt < now) {
                this.sessions.delete(sessionId);
                changed = true;
            }
        }
        if (changed) {
            await this.persistSessions();
        }
    }
    destroy() {
        clearInterval(this.cleanupInterval);
    }
}
exports.FileSessionStore = FileSessionStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVNlc3Npb25TdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taW5pbWFsL0ZpbGVTZXNzaW9uU3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXdDO0FBRXhDLG9DQUFzQztBQUV0QyxNQUFhLGdCQUFnQjtJQUszQixZQUNFLFVBQWtCLGlCQUFpQixFQUNuQyxvQkFBNEIsS0FBSztRQUwzQixhQUFRLEdBQThCLElBQUksR0FBRyxFQUFFLENBQUM7UUFPdEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHFCQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDZCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDOUIsTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUIsTUFBTSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU8sS0FBSyxDQUFDLFlBQVk7UUFDeEIsMEJBQTBCO1FBQzFCLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBRXRDLFVBQVUsQ0FBQyxDQUFDO1FBRWYsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUNoQixXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtvQkFDcEIsR0FBRyxJQUFJO29CQUNQLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMs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QVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2hDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDakIsQ0FBQztRQUNILENBQUM7UUFFRCxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ1osTUFBTSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDL0IsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0Y7QUFsSkQsNENBa0pDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZVN0b3JlIH0gZnJvbSBcIi4vRmlsZVN0b3JlXCI7XG5pbXBvcnQgeyBJU2Vzc2lvbkRhdGEsIElTZXNzaW9uU3RvcmUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgQ3J5cHRvVXRpbCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgRmlsZVNlc3Npb25TdG9yZSBpbXBsZW1lbnRzIElTZXNzaW9uU3RvcmUge1xuICBwcml2YXRlIHN0b3JlOiBGaWxlU3RvcmU7XG4gIHByaXZhdGUgc2Vzc2lvbnM6IE1hcDxzdHJpbmcsIElTZXNzaW9uRGF0YT4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgY2xlYW51cEludGVydmFsOiBOb2RlSlMuVGltZW91dDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBkYXRhRGlyOiBzdHJpbmcgPSBcIi4vLnNlc3Npb24tZGF0YVwiLFxuICAgIGNsZWFudXBJbnRlcnZhbE1zOiBudW1iZXIgPSA2MDAwMFxuICApIHtcbiAgICB0aGlzLnN0b3JlID0gbmV3IEZpbGVTdG9yZShkYXRhRGlyKTtcbiAgICB0aGlzLmNsZWFudXBJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH0sIGNsZWFudXBJbnRlcnZhbE1zKTtcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5zdG9yZS5pbml0aWFsaXplKCk7XG4gICAgYXdhaXQgdGhpcy5sb2FkU2Vzc2lvbnMoKTtcbiAgICBhd2FpdCB0aGlzLnBlcmZvcm1Jbml0aWFsQ2xlYW51cCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2FkU2Vzc2lvbnMoKSB7XG4gICAgLy8gTG9hZCBzZXNzaW9ucyBmcm9tIGZpbGVcbiAgICBjb25zdCBzZXNzaW9uRGF0YSA9IGF3YWl0IHRoaXMuc3RvcmUucmVhZDx7XG4gICAgICBzZXNzaW9uczogQXJyYXk8W3N0cmluZywgSVNlc3Npb25EYXRhXT47XG4gICAgfT4oXCJzZXNzaW9uc1wiKTtcblxuICAgIGlmIChzZXNzaW9uRGF0YSkge1xuICAgICAgc2Vzc2lvbkRhdGEuc2Vzc2lvbnMuZm9yRWFjaCgoW2lkLCBkYXRhXSkgPT4ge1xuICAgICAgICB0aGlzLnNlc3Npb25zLnNldChpZCwge1xuICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShkYXRhLmNyZWF0ZWRBdCksXG4gICAgICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShkYXRhLmV4cGlyZXNBdCksXG4gICAgICAgICAgbGFzdEFjY2Vzc2VkQXQ6IG5ldyBEYXRlKGRhdGEubGFzdEFjY2Vzc2VkQXQpLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcGVyZm9ybUluaXRpYWxDbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgXG4gICAgLy8gQ2xlYW4gdXAgZXhwaXJlZCBzZXNzaW9uc1xuICAgIGZvciAoY29uc3QgW3Nlc3Npb25JZCwgc2Vzc2lvbl0gb2YgdGhpcy5zZXNzaW9ucy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChzZXNzaW9uLmV4cGlyZXNBdCA8IG5vdykge1xuICAgICAgICB0aGlzLnNlc3Npb25zLmRlbGV0ZShzZXNzaW9uSWQpO1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIC8vIENsZWFuIHVwIHNlc3Npb25zIHRoYXQgaGF2ZW4ndCBiZWVuIGFjY2Vzc2VkIGluIGEgbG9uZyB0aW1lIChlLmcuLCAzMCBkYXlzKVxuICAgIGNvbnN0IHVudXNlZFRocmVzaG9sZCA9IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgLSAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgIGZvciAoY29uc3QgW3Nlc3Npb25JZCwgc2Vzc2lvbl0gb2YgdGhpcy5zZXNzaW9ucy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChzZXNzaW9uLmxhc3RBY2Nlc3NlZEF0IDwgdW51c2VkVGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbnMuZGVsZXRlKHNlc3Npb25JZCk7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgXG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMucGVyc2lzdFNlc3Npb25zKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwZXJzaXN0U2Vzc2lvbnMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5zdG9yZS53cml0ZShcInNlc3Npb25zXCIsIHtcbiAgICAgIHNlc3Npb25zOiBBcnJheS5mcm9tKHRoaXMuc2Vzc2lvbnMuZW50cmllcygpKS5tYXAoKFtpZCwgZGF0YV0pID0+IFtcbiAgICAgICAgaWQsXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgIGNyZWF0ZWRBdDogZGF0YS5jcmVhdGVkQXQudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBleHBpcmVzQXQ6IGRhdGEuZXhwaXJlc0F0LnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgbGFzdEFjY2Vzc2VkQXQ6IGRhdGEubGFzdEFjY2Vzc2VkQXQudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSxcbiAgICAgIF0pLFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlKHNlc3Npb25EYXRhOiBJU2Vzc2lvbkRhdGEpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHNlc3Npb25JZCA9IHNlc3Npb25EYXRhLnNlc3Npb25JZCB8fCBDcnlwdG9VdGlsLmdlbmVyYXRlVG9rZW4oKTtcbiAgICB0aGlzLnNlc3Npb25zLnNldChzZXNzaW9uSWQsIHtcbiAgICAgIC4uLnNlc3Npb25EYXRhLFxuICAgICAgc2Vzc2lvbklkLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5wZXJzaXN0U2Vzc2lvbnMoKTtcbiAgICByZXR1cm4gc2Vzc2lvbklkO1xuICB9XG5cbiAgYXN5bmMgZ2V0KHNlc3Npb25JZDogc3RyaW5nKTogUHJvbWlzZTxJU2Vzc2lvbkRhdGEgfCBudWxsPiB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChuZXcgRGF0ZSgpID4gc2Vzc2lvbi5leHBpcmVzQXQpIHtcbiAgICAgIGF3YWl0IHRoaXMuZGVsZXRlKHNlc3Npb25JZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Vzc2lvbjtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZShcbiAgICBzZXNzaW9uSWQ6IHN0cmluZyxcbiAgICBzZXNzaW9uRGF0YTogUGFydGlhbDxJU2Vzc2lvbkRhdGE+XG4gICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGV4aXN0aW5nU2Vzc2lvbiA9IGF3YWl0IHRoaXMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFleGlzdGluZ1Nlc3Npb24pIHJldHVybiBmYWxzZTtcblxuICAgIHRoaXMuc2Vzc2lvbnMuc2V0KHNlc3Npb25JZCwge1xuICAgICAgLi4uZXhpc3RpbmdTZXNzaW9uLFxuICAgICAgLi4uc2Vzc2lvbkRhdGEsXG4gICAgICBsYXN0QWNjZXNzZWRBdDogbmV3IERhdGUoKSxcbiAgICB9KTtcblxuICAgIGF3YWl0IHRoaXMucGVyc2lzdFNlc3Npb25zKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBkZWxldGUoc2Vzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBkZWxldGVkID0gdGhpcy5zZXNzaW9ucy5kZWxldGUoc2Vzc2lvbklkKTtcbiAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgYXdhaXQgdGhpcy5wZXJzaXN0U2Vzc2lvbnMoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBhc3luYyBjbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcblxuICAgIGZvciAoY29uc3QgW3Nlc3Npb25JZCwgc2Vzc2lvbl0gb2YgdGhpcy5zZXNzaW9ucy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChzZXNzaW9uLmV4cGlyZXNBdCA8IG5vdykge1xuICAgICAgICB0aGlzLnNlc3Npb25zLmRlbGV0ZShzZXNzaW9uSWQpO1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgYXdhaXQgdGhpcy5wZXJzaXN0U2Vzc2lvbnMoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KCk6IHZvaWQge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jbGVhbnVwSW50ZXJ2YWwpO1xuICB9XG59XG4iXX0=