"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryAuthProvider = void 0;
const utils_1 = require("../utils");
class InMemoryAuthProvider {
    constructor() {
        this.users = new Map();
        this.tokens = new Map();
    }
    // Method to add users (for setup/testing)
    async addUser(username, password) {
        const userId = utils_1.CryptoUtil.generateToken().slice(0, 8);
        const passwordHash = await utils_1.CryptoUtil.hashPassword(password);
        this.users.set(username, {
            userId,
            username,
            passwordHash,
        });
        return userId;
    }
    async authenticate(credentials) {
        const user = this.users.get(credentials.username);
        console.log("user", user);
        if (!user) {
            return { success: false, error: "User not found" };
        }
        const passwordHash = await utils_1.CryptoUtil.hashPassword(credentials.password);
        if (passwordHash !== user.passwordHash) {
            return { success: false, error: "Invalid password" };
        }
        // Generate tokens
        const token = utils_1.CryptoUtil.generateToken();
        const refreshToken = utils_1.CryptoUtil.generateToken();
        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours
        this.tokens.set(token, {
            userId: user.userId,
            expiresAt,
            refreshToken,
        });
        return {
            success: true,
            userId: user.userId,
            token,
            refreshToken,
            expiresAt,
            metadata: user.metadata,
        };
    }
    async validateToken(token) {
        const tokenData = this.tokens.get(token);
        if (!tokenData) {
            return { success: false, error: "Invalid token" };
        }
        if (tokenData.expiresAt < new Date()) {
            this.tokens.delete(token);
            return { success: false, error: "Token expired" };
        }
        return {
            success: true,
            userId: tokenData.userId,
            token,
            expiresAt: tokenData.expiresAt,
        };
    }
    async refreshToken(refreshToken) {
        // Find token entry by refresh token
        const tokenEntry = Array.from(this.tokens.entries()).find(([_, data]) => data.refreshToken === refreshToken);
        if (!tokenEntry) {
            return { success: false, error: "Invalid refresh token" };
        }
        // Generate new tokens
        const newToken = utils_1.CryptoUtil.generateToken();
        const newRefreshToken = utils_1.CryptoUtil.generateToken();
        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);
        // Remove old token
        this.tokens.delete(tokenEntry[0]);
        // Store new tokens
        this.tokens.set(newToken, {
            userId: tokenEntry[1].userId,
            expiresAt,
            refreshToken: newRefreshToken,
        });
        return {
            success: true,
            userId: tokenEntry[1].userId,
            token: newToken,
            refreshToken: newRefreshToken,
            expiresAt,
        };
    }
}
exports.InMemoryAuthProvider = InMemoryAuthProvider;
//# sourceMappingURL=data:application/json;base64,