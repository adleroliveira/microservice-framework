"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryPubSubConsumer = exports.PubSubConsumerClient = void 0;
const PubSubConsumer_1 = require("../core/PubSubConsumer");
class PubSubConsumerClient {
    constructor() {
        this.channels = new Map();
    }
    async subscribe(channel) {
        if (!this.channels.has(channel)) {
            this.channels.set(channel, new Set());
        }
    }
    async unsubscribe(channel) {
        this.channels.delete(channel);
    }
    async publish(channel, message) {
        if (this.channels.has(channel)) {
            for (const callback of this.channels.get(channel)) {
                callback(message);
            }
        }
    }
    addCallback(channel, callback) {
        if (!this.channels.has(channel)) {
            this.channels.set(channel, new Set());
        }
        this.channels.get(channel).add(callback);
    }
    removeCallback(channel, callback) {
        if (this.channels.has(channel)) {
            this.channels.get(channel).delete(callback);
            if (this.channels.get(channel).size === 0) {
                this.channels.delete(channel);
            }
        }
    }
}
exports.PubSubConsumerClient = PubSubConsumerClient;
class MemoryPubSubConsumer extends PubSubConsumer_1.PubSubConsumer {
    constructor(client, options) {
        super(client, options);
        this.client = client;
        this.callbacks = new Map();
    }
    async subscribe(channel, callback) {
        await this.client.subscribe(channel);
        this.client.addCallback(channel, callback);
        if (!this.callbacks.has(channel)) {
            this.callbacks.set(channel, new Set());
        }
        this.callbacks.get(channel).add(callback);
    }
    async unsubscribe(channel) {
        if (this.callbacks.has(channel)) {
            for (const callback of this.callbacks.get(channel)) {
                this.client.removeCallback(channel, callback);
            }
            this.callbacks.delete(channel);
        }
        await this.client.unsubscribe(channel);
    }
    async publish(channel, message) {
        await this.client.publish(channel, message);
    }
}
exports.MemoryPubSubConsumer = MemoryPubSubConsumer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHViU3ViQ29uc3VtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWluaW1hbC9QdWJTdWJDb25zdW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyREFBK0U7QUFHL0UsTUFBYSxvQkFBb0I7SUFHL0I7UUFGUSxhQUFRLEdBQTZDLElBQUksR0FBRyxFQUFFLENBQUM7SUFFeEQsQ0FBQztJQUVoQixLQUFLLENBQUMsU0FBUyxDQUFDLE9BQWU7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4QyxDQUFDO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBZTtRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFlLEVBQUUsT0FBWTtRQUN6QyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDL0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFDO2dCQUNuRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQWUsRUFBRSxRQUFnQztRQUMzRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGNBQWMsQ0FBQyxPQUFlLEVBQUUsUUFBZ0M7UUFDOUQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM3QyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUF0Q0Qsb0RBc0NDO0FBSUQsTUFBYSxvQkFBcUIsU0FBUSwrQkFBYztJQUd0RCxZQUNZLE1BQTRCLEVBQ3RDLE9BQW9DO1FBRXBDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFIYixXQUFNLEdBQU4sTUFBTSxDQUFzQjtRQUhoQyxjQUFTLEdBQTZDLElBQUksR0FBRyxFQUFFLENBQUM7SUFPeEUsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTLENBQ2IsT0FBZSxFQUNmLFFBQWdDO1FBRWhDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQy9CLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUM7Z0JBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNoRCxDQUFDO1lBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUNELE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZSxFQUFFLE9BQVk7UUFDekMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUNGO0FBbkNELG9EQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFB1YlN1YkNvbnN1bWVyLCBQdWJTdWJDb25zdW1lck9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS9QdWJTdWJDb25zdW1lclwiO1xuaW1wb3J0IHsgSVB1YlN1YkNsaWVudCB9IGZyb20gXCIuLi9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCBjbGFzcyBQdWJTdWJDb25zdW1lckNsaWVudCBpbXBsZW1lbnRzIElQdWJTdWJDbGllbnQge1xuICBwcml2YXRlIGNoYW5uZWxzOiBNYXA8c3RyaW5nLCBTZXQ8KG1lc3NhZ2U6IGFueSkgPT4gdm9pZD4+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBhc3luYyBzdWJzY3JpYmUoY2hhbm5lbDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmNoYW5uZWxzLmhhcyhjaGFubmVsKSkge1xuICAgICAgdGhpcy5jaGFubmVscy5zZXQoY2hhbm5lbCwgbmV3IFNldCgpKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB1bnN1YnNjcmliZShjaGFubmVsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmNoYW5uZWxzLmRlbGV0ZShjaGFubmVsKTtcbiAgfVxuXG4gIGFzeW5jIHB1Ymxpc2goY2hhbm5lbDogc3RyaW5nLCBtZXNzYWdlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5jaGFubmVscy5oYXMoY2hhbm5lbCkpIHtcbiAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy5jaGFubmVscy5nZXQoY2hhbm5lbCkhKSB7XG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFkZENhbGxiYWNrKGNoYW5uZWw6IHN0cmluZywgY2FsbGJhY2s6IChtZXNzYWdlOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY2hhbm5lbHMuaGFzKGNoYW5uZWwpKSB7XG4gICAgICB0aGlzLmNoYW5uZWxzLnNldChjaGFubmVsLCBuZXcgU2V0KCkpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5uZWxzLmdldChjaGFubmVsKSEuYWRkKGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJlbW92ZUNhbGxiYWNrKGNoYW5uZWw6IHN0cmluZywgY2FsbGJhY2s6IChtZXNzYWdlOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jaGFubmVscy5oYXMoY2hhbm5lbCkpIHtcbiAgICAgIHRoaXMuY2hhbm5lbHMuZ2V0KGNoYW5uZWwpIS5kZWxldGUoY2FsbGJhY2spO1xuICAgICAgaWYgKHRoaXMuY2hhbm5lbHMuZ2V0KGNoYW5uZWwpIS5zaXplID09PSAwKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbHMuZGVsZXRlKGNoYW5uZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5pbnRlcmZhY2UgTWVtb3J5UHViU3ViQ29uc3VtZXJPcHRpb25zIGV4dGVuZHMgUHViU3ViQ29uc3VtZXJPcHRpb25zIHt9XG5cbmV4cG9ydCBjbGFzcyBNZW1vcnlQdWJTdWJDb25zdW1lciBleHRlbmRzIFB1YlN1YkNvbnN1bWVyIHtcbiAgcHJpdmF0ZSBjYWxsYmFja3M6IE1hcDxzdHJpbmcsIFNldDwobWVzc2FnZTogYW55KSA9PiB2b2lkPj4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGNsaWVudDogUHViU3ViQ29uc3VtZXJDbGllbnQsXG4gICAgb3B0aW9uczogTWVtb3J5UHViU3ViQ29uc3VtZXJPcHRpb25zXG4gICkge1xuICAgIHN1cGVyKGNsaWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBhc3luYyBzdWJzY3JpYmUoXG4gICAgY2hhbm5lbDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAobWVzc2FnZTogYW55KSA9PiB2b2lkXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuY2xpZW50LnN1YnNjcmliZShjaGFubmVsKTtcbiAgICB0aGlzLmNsaWVudC5hZGRDYWxsYmFjayhjaGFubmVsLCBjYWxsYmFjayk7XG4gICAgaWYgKCF0aGlzLmNhbGxiYWNrcy5oYXMoY2hhbm5lbCkpIHtcbiAgICAgIHRoaXMuY2FsbGJhY2tzLnNldChjaGFubmVsLCBuZXcgU2V0KCkpO1xuICAgIH1cbiAgICB0aGlzLmNhbGxiYWNrcy5nZXQoY2hhbm5lbCkhLmFkZChjYWxsYmFjayk7XG4gIH1cblxuICBhc3luYyB1bnN1YnNjcmliZShjaGFubmVsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5jYWxsYmFja3MuaGFzKGNoYW5uZWwpKSB7XG4gICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHRoaXMuY2FsbGJhY2tzLmdldChjaGFubmVsKSEpIHtcbiAgICAgICAgdGhpcy5jbGllbnQucmVtb3ZlQ2FsbGJhY2soY2hhbm5lbCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWxsYmFja3MuZGVsZXRlKGNoYW5uZWwpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmNsaWVudC51bnN1YnNjcmliZShjaGFubmVsKTtcbiAgfVxuXG4gIGFzeW5jIHB1Ymxpc2goY2hhbm5lbDogc3RyaW5nLCBtZXNzYWdlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmNsaWVudC5wdWJsaXNoKGNoYW5uZWwsIG1lc3NhZ2UpO1xuICB9XG59XG4iXX0=