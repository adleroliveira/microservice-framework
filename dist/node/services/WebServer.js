"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebServer = void 0;
const http_1 = __importDefault(require("http"));
const url_1 = __importDefault(require("url"));
const zlib_1 = __importDefault(require("zlib"));
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const MicroserviceFramework_1 = require("../MicroserviceFramework");
class WebServer extends MicroserviceFramework_1.MicroserviceFramework {
    constructor(backend, config) {
        super(backend, config);
        this.port = config.port || 8080;
        this.maxBodySize = config.maxBodySize || 1e6;
        this.timeout = config.timeout || 30000;
        this.corsOrigin = config.corsOrigin || "*";
        this.staticDir = config.staticDir || null;
        this.server = http_1.default.createServer(this.handleRequest.bind(this));
    }
    async handleRequest(req, res) {
        if (req.method === "OPTIONS") {
            res.writeHead(200, {
                "Access-Control-Allow-Origin": this.corsOrigin,
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization",
                "Access-Control-Max-Age": "86400", // 24 hours
            });
            res.end();
            return;
        }
        const parsedUrl = url_1.default.parse(req.url || "", true);
        if (this.staticDir && req.method === "GET") {
            let staticFilePath = path_1.default.join(this.staticDir, parsedUrl.pathname || "");
            // Check if the path is a directory
            try {
                const stats = await promises_1.default.stat(staticFilePath);
                if (stats.isDirectory()) {
                    // If it's a directory, look for index.html
                    staticFilePath = path_1.default.join(staticFilePath, "index.html");
                }
            }
            catch (error) {
                // If stat fails, just continue with the original path
            }
            try {
                const content = await this.serveStaticFile(staticFilePath);
                if (content) {
                    this.sendStaticResponse(res, 200, content, this.getContentType(staticFilePath));
                    return;
                }
            }
            catch (error) {
                if (error.code !== "ENOENT") {
                    this.error(`Error serving static file: ${error}`);
                    this.sendResponse(res, 500, { error: "Internal Server Error" });
                    return;
                }
            }
        }
        const chunks = [];
        let bodySize = 0;
        req.setTimeout(this.timeout, () => {
            this.sendResponse(res, 408, { error: "Request Timeout" });
        });
        req.on("data", (chunk) => {
            bodySize += chunk.length;
            if (bodySize > this.maxBodySize) {
                this.sendResponse(res, 413, { error: "Payload Too Large" });
                req.destroy();
            }
            else {
                chunks.push(Buffer.from(chunk));
            }
        });
        req.on("end", async () => {
            if (req.destroyed)
                return;
            const rawBody = Buffer.concat(chunks);
            const contentType = req.headers["content-type"] || "";
            let parsedBody;
            if (contentType.includes("multipart/form-data")) {
                parsedBody = rawBody; // Keep as Buffer for multipart/form-data
            }
            else {
                parsedBody = this.parseBody(rawBody.toString(), contentType);
            }
            const httpRequest = {
                method: req.method || "GET",
                path: parsedUrl.pathname || "/",
                query: parsedUrl.query,
                headers: req.headers,
                body: parsedBody,
            };
            try {
                const response = await this.processHttpRequest(httpRequest);
                this.sendResponse(res, response.statusCode, response.body, response.headers);
            }
            catch (error) {
                this.error(`Error processing request: ${error}`);
                this.sendResponse(res, 500, { error: "Internal Server Error" });
            }
        });
        req.on("error", (error) => {
            this.error(`Request error: ${error}`);
            this.sendResponse(res, 400, { error: "Bad Request" });
        });
    }
    async serveStaticFile(filePath) {
        try {
            const content = await promises_1.default.readFile(filePath);
            return content;
        }
        catch (error) {
            if (error.code === "ENOENT") {
                return null; // File not found
            }
            throw error; // Other errors
        }
    }
    sendStaticResponse(res, statusCode, body, contentType) {
        const contentEncoding = this.negotiateContentEncoding(res);
        res.writeHead(statusCode, {
            "Content-Type": contentType,
            "Access-Control-Allow-Origin": this.corsOrigin,
            "X-XSS-Protection": "1; mode=block",
            "X-Frame-Options": "DENY",
            "X-Content-Type-Options": "nosniff",
            ...(contentEncoding ? { "Content-Encoding": contentEncoding } : {}),
        });
        if (contentEncoding === "gzip") {
            zlib_1.default.gzip(body, (_, result) => res.end(result));
        }
        else if (contentEncoding === "deflate") {
            zlib_1.default.deflate(body, (_, result) => res.end(result));
        }
        else {
            res.end(body);
        }
    }
    getContentType(filePath) {
        const ext = path_1.default.extname(filePath).toLowerCase();
        const mimeTypes = {
            ".html": "text/html",
            ".js": "text/javascript",
            ".css": "text/css",
            ".json": "application/json",
            ".png": "image/png",
            ".jpg": "image/jpeg",
            ".gif": "image/gif",
            ".svg": "image/svg+xml",
            ".wav": "audio/wav",
            ".mp4": "video/mp4",
            ".woff": "application/font-woff",
            ".ttf": "application/font-ttf",
            ".eot": "application/vnd.ms-fontobject",
            ".otf": "application/font-otf",
            ".wasm": "application/wasm",
        };
        return mimeTypes[ext] || "application/octet-stream";
    }
    parseBody(body, contentType) {
        if (!contentType)
            return body;
        if (contentType.includes("application/json")) {
            try {
                return JSON.parse(body);
            }
            catch (error) {
                this.warn(`Failed to parse JSON body: ${error}`);
                return body;
            }
        }
        // Handle multipart/form-data
        if (contentType.includes("multipart/form-data")) {
            try {
                // For multipart/form-data, we need to parse the raw body
                // The body will be available as Buffer or string
                return body;
            }
            catch (error) {
                this.warn(`Failed to parse multipart/form-data: ${error}`);
                return body;
            }
        }
        return body;
    }
    sendResponse(res, statusCode, body, headers = {}) {
        const responseBody = JSON.stringify(body);
        const contentEncoding = this.negotiateContentEncoding(res);
        res.writeHead(statusCode, {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": this.corsOrigin,
            "X-XSS-Protection": "1; mode=block",
            "X-Frame-Options": "DENY",
            "X-Content-Type-Options": "nosniff",
            ...headers,
            ...(contentEncoding ? { "Content-Encoding": contentEncoding } : {}),
        });
        if (contentEncoding === "gzip") {
            zlib_1.default.gzip(responseBody, (_, result) => res.end(result));
        }
        else if (contentEncoding === "deflate") {
            zlib_1.default.deflate(responseBody, (_, result) => res.end(result));
        }
        else {
            res.end(responseBody);
        }
    }
    negotiateContentEncoding(res) {
        const acceptEncoding = res.getHeader("accept-encoding") || "";
        if (acceptEncoding.includes("gzip"))
            return "gzip";
        if (acceptEncoding.includes("deflate"))
            return "deflate";
        return null;
    }
    async processHttpRequest(httpRequest) {
        const requestType = `${httpRequest.method}:${httpRequest.path}`;
        this.info(`Received request: ${requestType}`);
        const response = await this.makeRequest({
            to: this.serviceId,
            requestType,
            body: httpRequest,
        });
        return response.body.data;
    }
    async startDependencies() {
        return new Promise((resolve) => {
            this.server.listen(this.port, () => {
                this.info(`Web server listening on port ${this.port}`);
                resolve();
            });
        });
    }
    async stopDependencies() {
        return new Promise((resolve) => {
            this.server.close(() => {
                this.info("Web server stopped");
                resolve();
            });
        });
    }
    async defaultMessageHandler(request) {
        this.warn(`Path not found: ${request.header.requestType}`);
        return {
            statusCode: 404,
            headers: { "Content-Type": "application/json" },
            body: { message: "Path not found" },
        };
    }
}
exports.WebServer = WebServer;
//# sourceMappingURL=data:application/json;base64,