"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsocketConnection = void 0;
const ws_1 = __importDefault(require("ws"));
const crypto_1 = require("crypto");
const core_1 = require("../core");
class WebsocketConnection {
    constructor(handleMessage, handleClose, maxMessagesPerMinute = 100, events, websocket, heartbeatInterval = 30000, // 30 seconds
    heartbeatTimeout = 5000 // 5 seconds
    ) {
        this.handleMessage = handleMessage;
        this.handleClose = handleClose;
        this.maxMessagesPerMinute = maxMessagesPerMinute;
        this.events = events;
        this.heartbeatInterval = heartbeatInterval;
        this.heartbeatTimeout = heartbeatTimeout;
        this.lastHeartbeatResponse = Date.now();
        this.messageCount = 0;
        this.authenticated = false;
        this.metadata = new Map();
        this.websocket = null;
        this.eventListenersSetup = false;
        this.closePromise = null;
        this.lastMessageHash = "";
        this.connectionId = crypto.randomUUID();
        this.lastActivityTime = Date.now();
        if (websocket) {
            this.setWebSocket(websocket);
        }
    }
    startHeartbeat() {
        if (this.heartbeatTimer) {
            clearInterval(this.heartbeatTimer);
        }
        this.heartbeatTimer = setInterval(() => {
            this.sendHeartbeat();
        }, this.heartbeatInterval);
    }
    sendHeartbeat() {
        if (!this.isConnected()) {
            return;
        }
        const heartbeatRequest = new core_1.RequestBuilder({ timestamp: Date.now() })
            .setRequiresResponse(true)
            .setRequestType("heartbeat")
            .setRequesterAddress(this.getSessionId() || this.connectionId);
        this.send(JSON.stringify(heartbeatRequest.build()));
        // Set timeout for response
        this.heartbeatTimeoutTimer = setTimeout(() => {
            this.events?.onError(this.connectionId, new Error("Heartbeat timeout"));
            this.close(1001, "Heartbeat timeout");
        }, this.heartbeatTimeout);
    }
    setWebSocket(websocket) {
        if (this.websocket) {
            // Clean up existing connection first
            this.cleanupExistingConnection();
        }
        this.websocket = websocket;
        this.setupEventListeners();
        this.lastActivityTime = Date.now();
        this.websocket.maxPayload = WebsocketConnection.MAX_MESSAGE_SIZE;
    }
    cleanupExistingConnection() {
        if (this.websocket) {
            try {
                // Remove listeners before terminating to prevent any race conditions
                this.websocket.removeAllListeners();
                if (this.websocket.readyState !== ws_1.default.CLOSED) {
                    this.websocket.terminate();
                }
                this.websocket = null; // Clear the reference
            }
            catch (error) {
                this.events?.onError(this.connectionId, error);
            }
        }
    }
    setupEventListeners() {
        if (!this.websocket || this.eventListenersSetup) {
            return;
        }
        this.websocket.on("message", this.handleWebsocketMessages.bind(this));
        this.websocket.on("close", this.handleCloseConnection.bind(this));
        this.websocket.on("pong", this.handlePong.bind(this));
        this.websocket.on("error", this.handleError.bind(this));
        this.websocket.on("unexpected-response", this.handleUnexpectedResponse.bind(this));
        this.startHeartbeat();
        this.eventListenersSetup = true;
    }
    handleError(error) {
        this.events?.onError(this.connectionId, error);
        this.close(1006, "Internal error occurred");
    }
    handleUnexpectedResponse() {
        this.events?.onSecurityViolation(this.connectionId, "Unexpected response received");
        this.close(1006, "Unexpected response");
    }
    handlePong() {
        this.lastActivityTime = Date.now();
    }
    send(message) {
        if (!this.websocket) {
            throw new Error("Cannot send message: WebSocket not initialized");
        }
        try {
            // Check message size before sending
            const messageSize = Buffer.byteLength(message);
            if (messageSize > WebsocketConnection.MAX_MESSAGE_SIZE) {
                throw new Error("Message exceeds maximum size limit");
            }
            this.websocket.send(message);
            this.lastActivityTime = Date.now();
        }
        catch (error) {
            this.events?.onError(this.connectionId, error);
            throw error;
        }
    }
    handleCloseConnection() {
        if (this.connectionId) {
            this.handleClose(this.connectionId).catch((error) => {
                this.events?.onError(this.connectionId, error);
            });
        }
    }
    async handleWebsocketMessages(message) {
        try {
            this.lastActivityTime = Date.now();
            // Size check
            const messageSize = this.getDataSize(message);
            if (messageSize > WebsocketConnection.MAX_MESSAGE_SIZE) {
                this.events?.onSecurityViolation(this.connectionId, "Message size exceeded");
                this.send(JSON.stringify({ error: "Message too large" }));
                return;
            }
            // Rate limiting
            if (this.isRateLimited()) {
                this.events?.onRateLimit(this.connectionId);
                this.send(JSON.stringify({ error: "Rate limit exceeded" }));
                return;
            }
            // Detect message replay attacks
            const messageString = this.dataToString(message);
            const messageHash = this.calculateMessageHash(messageString);
            if (messageHash === this.lastMessageHash) {
                this.events?.onSecurityViolation(this.connectionId, "Possible replay attack");
                return;
            }
            this.lastMessageHash = messageHash;
            this.messageCount++;
            //TODO: look for a more performant way to determine if message is heartbeat response (without JSON.parse it)
            const parsedMessage = JSON.parse(this.dataToString(message));
            // Check if it's a heartbeat response
            if (parsedMessage?.requestHeader?.requestType === "heartbeat" &&
                parsedMessage?.body?.success) {
                clearTimeout(this.heartbeatTimeoutTimer);
                this.lastHeartbeatResponse = Date.now();
                return;
            }
            this.handleMessage(message, this);
        }
        catch (error) {
            this.events?.onError(this.connectionId, error);
        }
    }
    calculateMessageHash(message) {
        return (0, crypto_1.createHash)("sha256").update(message).digest("hex");
    }
    dataToString(data) {
        if (typeof data === "string") {
            return data;
        }
        if (data instanceof Buffer) {
            return data.toString();
        }
        if (data instanceof ArrayBuffer) {
            return Buffer.from(data).toString();
        }
        if (Array.isArray(data)) {
            return Buffer.concat(data).toString();
        }
        return "";
    }
    getDataSize(data) {
        if (typeof data === "string") {
            return Buffer.byteLength(data);
        }
        if (data instanceof Buffer) {
            return data.length;
        }
        if (data instanceof ArrayBuffer) {
            return data.byteLength;
        }
        if (Array.isArray(data)) {
            return data.reduce((acc, buf) => acc + buf.length, 0);
        }
        return 0;
    }
    isRateLimited() {
        const oneMinuteAgo = Date.now() - 60000;
        if (this.messageCount > this.maxMessagesPerMinute &&
            this.lastActivityTime > oneMinuteAgo) {
            return true;
        }
        if (this.lastActivityTime <= oneMinuteAgo) {
            this.messageCount = 0;
        }
        return false;
    }
    getConnectionId() {
        return this.connectionId;
    }
    setAuthenticated(value) {
        this.authenticated = value;
    }
    isAuthenticated() {
        return this.authenticated;
    }
    close(code, reason) {
        if (!this.closePromise) {
            this.closePromise = new Promise((resolve) => {
                this.stopSessionRefresh();
                if (!this.websocket || this.websocket.readyState === ws_1.default.CLOSED) {
                    resolve();
                    return;
                }
                const cleanup = () => {
                    this.cleanupExistingConnection();
                    resolve();
                };
                // Immediately terminate after timeout instead of waiting
                const timeoutId = setTimeout(() => {
                    if (this.websocket) {
                        this.websocket.terminate();
                        cleanup();
                    }
                }, WebsocketConnection.FORCED_CLOSE_TIMEOUT);
                this.websocket.once("close", () => {
                    clearTimeout(timeoutId);
                    cleanup();
                });
                if (this.heartbeatTimer) {
                    clearInterval(this.heartbeatTimer);
                }
                if (this.heartbeatTimeoutTimer) {
                    clearTimeout(this.heartbeatTimeoutTimer);
                }
                // Initiate graceful close
                this.websocket.close(code, reason);
            });
        }
        return this.closePromise;
    }
    ping() {
        if (this.websocket) {
            this.websocket.ping();
        }
    }
    isConnected() {
        return (this.websocket !== null && this.websocket.readyState === ws_1.default.OPEN);
    }
    setMetadata(key, value) {
        this.metadata.set(key, value);
    }
    getMetadata(key) {
        return this.metadata.get(key);
    }
    async refreshSession(sessionStore) {
        try {
            const sessionId = this.getMetadata("sessionId");
            if (!sessionId)
                return false;
            const session = await sessionStore.get(sessionId);
            if (!session) {
                // Session invalid - close connection
                this.close(1008, "Session expired");
                return false;
            }
            session.lastAccessedAt = new Date();
            return sessionStore.update(sessionId, session);
        }
        catch (error) {
            this.events?.onError(this.connectionId, error);
            return false;
        }
    }
    startSessionRefresh(sessionStore) {
        if (this.sessionRefreshTimer) {
            clearInterval(this.sessionRefreshTimer);
        }
        this.sessionRefreshTimer = setInterval(() => this.refreshSession(sessionStore), WebsocketConnection.SESSION_REFRESH_INTERVAL);
    }
    stopSessionRefresh() {
        if (this.sessionRefreshTimer) {
            clearInterval(this.sessionRefreshTimer);
            this.sessionRefreshTimer = undefined;
        }
    }
    // Static method for broadcasting to multiple connections
    static broadcast(message, connections) {
        connections.forEach((connection) => {
            if (connection.isConnected()) {
                connection.send(message);
            }
        });
    }
    getSessionId() {
        return this.getMetadata("sessionId");
    }
    getConnectionStatus() {
        return {
            connectionId: this.getConnectionId(),
            lastActivityTime: this.lastActivityTime,
            lastHeartbeatResponse: this.lastHeartbeatResponse,
            messageCount: this.messageCount,
            authenticated: this.isAuthenticated(),
            sessionId: this.getSessionId(),
            metadata: Object.fromEntries(this.metadata.entries()),
        };
    }
}
exports.WebsocketConnection = WebsocketConnection;
WebsocketConnection.MAX_MESSAGE_SIZE = 1024 * 1024; // 1MB
WebsocketConnection.SESSION_REFRESH_INTERVAL = 60000; // 1 minute
WebsocketConnection.FORCED_CLOSE_TIMEOUT = 5000; // 5 seconds
//# sourceMappingURL=data:application/json;base64,