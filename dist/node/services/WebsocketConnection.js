"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsocketConnection = void 0;
const ws_1 = __importDefault(require("ws"));
const crypto_1 = require("crypto");
class WebsocketConnection {
    constructor(handleMessage, handleClose, maxMessagesPerMinute = 100, events, websocket, heartbeatInterval = 30000, // 30 seconds
    heartbeatTimeout = 5000 // 5 seconds
    ) {
        this.handleMessage = handleMessage;
        this.handleClose = handleClose;
        this.maxMessagesPerMinute = maxMessagesPerMinute;
        this.events = events;
        this.heartbeatInterval = heartbeatInterval;
        this.heartbeatTimeout = heartbeatTimeout;
        this.lastHeartbeatResponse = Date.now();
        this.messageCount = 0;
        this.authenticated = false;
        this.metadata = new Map();
        this.websocket = null;
        this.eventListenersSetup = false;
        this.closePromise = null;
        this.lastMessageHash = "";
        this.connectionId = crypto.randomUUID();
        this.lastActivityTime = Date.now();
        if (websocket) {
            this.setWebSocket(websocket);
        }
    }
    startHeartbeat() {
        if (this.heartbeatTimer) {
            clearInterval(this.heartbeatTimer);
        }
        this.heartbeatTimer = setInterval(() => {
            this.sendHeartbeat();
        }, this.heartbeatInterval);
    }
    sendHeartbeat() {
        if (!this.isConnected()) {
            return;
        }
        const heartbeatRequest = {
            header: {
                timestamp: Date.now(),
                requestId: crypto.randomUUID(),
                requesterAddress: this.getSessionId() || this.connectionId,
                requestType: "heartbeat",
            },
            body: {
                timestamp: Date.now(),
            },
        };
        this.send(JSON.stringify(heartbeatRequest));
        // Set timeout for response
        this.heartbeatTimeoutTimer = setTimeout(() => {
            this.events?.onError(this.connectionId, new Error("Heartbeat timeout"));
            this.close(1001, "Heartbeat timeout");
        }, this.heartbeatTimeout);
    }
    setWebSocket(websocket) {
        if (this.websocket) {
            // Clean up existing connection first
            this.cleanupExistingConnection();
        }
        this.websocket = websocket;
        this.setupEventListeners();
        this.lastActivityTime = Date.now();
        this.websocket.maxPayload = WebsocketConnection.MAX_MESSAGE_SIZE;
    }
    cleanupExistingConnection() {
        if (this.websocket) {
            try {
                // Remove listeners before terminating to prevent any race conditions
                this.websocket.removeAllListeners();
                if (this.websocket.readyState !== ws_1.default.CLOSED) {
                    this.websocket.terminate();
                }
                this.websocket = null; // Clear the reference
            }
            catch (error) {
                this.events?.onError(this.connectionId, error);
            }
        }
    }
    setupEventListeners() {
        if (!this.websocket || this.eventListenersSetup) {
            return;
        }
        this.websocket.on("message", this.handleWebsocketMessages.bind(this));
        this.websocket.on("close", this.handleCloseConnection.bind(this));
        this.websocket.on("pong", this.handlePong.bind(this));
        this.websocket.on("error", this.handleError.bind(this));
        this.websocket.on("unexpected-response", this.handleUnexpectedResponse.bind(this));
        this.startHeartbeat();
        this.eventListenersSetup = true;
    }
    handleError(error) {
        this.events?.onError(this.connectionId, error);
        this.close(1006, "Internal error occurred");
    }
    handleUnexpectedResponse() {
        this.events?.onSecurityViolation(this.connectionId, "Unexpected response received");
        this.close(1006, "Unexpected response");
    }
    handlePong() {
        this.lastActivityTime = Date.now();
    }
    send(message) {
        if (!this.websocket) {
            throw new Error("Cannot send message: WebSocket not initialized");
        }
        try {
            // Check message size before sending
            const messageSize = Buffer.byteLength(message);
            if (messageSize > WebsocketConnection.MAX_MESSAGE_SIZE) {
                throw new Error("Message exceeds maximum size limit");
            }
            this.websocket.send(message);
            this.lastActivityTime = Date.now();
        }
        catch (error) {
            this.events?.onError(this.connectionId, error);
            throw error;
        }
    }
    handleCloseConnection() {
        if (this.connectionId) {
            this.handleClose(this.connectionId).catch((error) => {
                this.events?.onError(this.connectionId, error);
            });
        }
    }
    async handleWebsocketMessages(message) {
        try {
            this.lastActivityTime = Date.now();
            // Size check
            const messageSize = this.getDataSize(message);
            if (messageSize > WebsocketConnection.MAX_MESSAGE_SIZE) {
                this.events?.onSecurityViolation(this.connectionId, "Message size exceeded");
                this.send(JSON.stringify({ error: "Message too large" }));
                return;
            }
            // Rate limiting
            if (this.isRateLimited()) {
                this.events?.onRateLimit(this.connectionId);
                this.send(JSON.stringify({ error: "Rate limit exceeded" }));
                return;
            }
            // Detect message replay attacks
            const messageString = this.dataToString(message);
            const messageHash = this.calculateMessageHash(messageString);
            if (messageHash === this.lastMessageHash) {
                this.events?.onSecurityViolation(this.connectionId, "Possible replay attack");
                return;
            }
            this.lastMessageHash = messageHash;
            this.messageCount++;
            //TODO: look for a more performant way to determine if message is heartbeat response (without JSON.parse it)
            const parsedMessage = JSON.parse(this.dataToString(message));
            // Check if it's a heartbeat response
            if (parsedMessage?.requestHeader?.requestType === "heartbeat" &&
                parsedMessage?.body?.success) {
                clearTimeout(this.heartbeatTimeoutTimer);
                this.lastHeartbeatResponse = Date.now();
                return;
            }
            this.handleMessage(message, this);
        }
        catch (error) {
            this.events?.onError(this.connectionId, error);
        }
    }
    calculateMessageHash(message) {
        return (0, crypto_1.createHash)("sha256").update(message).digest("hex");
    }
    dataToString(data) {
        if (typeof data === "string") {
            return data;
        }
        if (data instanceof Buffer) {
            return data.toString();
        }
        if (data instanceof ArrayBuffer) {
            return Buffer.from(data).toString();
        }
        if (Array.isArray(data)) {
            return Buffer.concat(data).toString();
        }
        return "";
    }
    getDataSize(data) {
        if (typeof data === "string") {
            return Buffer.byteLength(data);
        }
        if (data instanceof Buffer) {
            return data.length;
        }
        if (data instanceof ArrayBuffer) {
            return data.byteLength;
        }
        if (Array.isArray(data)) {
            return data.reduce((acc, buf) => acc + buf.length, 0);
        }
        return 0;
    }
    isRateLimited() {
        const oneMinuteAgo = Date.now() - 60000;
        if (this.messageCount > this.maxMessagesPerMinute &&
            this.lastActivityTime > oneMinuteAgo) {
            return true;
        }
        if (this.lastActivityTime <= oneMinuteAgo) {
            this.messageCount = 0;
        }
        return false;
    }
    getConnectionId() {
        return this.connectionId;
    }
    setAuthenticated(value) {
        this.authenticated = value;
    }
    isAuthenticated() {
        return this.authenticated;
    }
    close(code, reason) {
        if (!this.closePromise) {
            this.closePromise = new Promise((resolve) => {
                this.stopSessionRefresh();
                if (!this.websocket || this.websocket.readyState === ws_1.default.CLOSED) {
                    resolve();
                    return;
                }
                const cleanup = () => {
                    this.cleanupExistingConnection();
                    resolve();
                };
                // Immediately terminate after timeout instead of waiting
                const timeoutId = setTimeout(() => {
                    if (this.websocket) {
                        this.websocket.terminate();
                        cleanup();
                    }
                }, WebsocketConnection.FORCED_CLOSE_TIMEOUT);
                this.websocket.once("close", () => {
                    clearTimeout(timeoutId);
                    cleanup();
                });
                if (this.heartbeatTimer) {
                    clearInterval(this.heartbeatTimer);
                }
                if (this.heartbeatTimeoutTimer) {
                    clearTimeout(this.heartbeatTimeoutTimer);
                }
                // Initiate graceful close
                this.websocket.close(code, reason);
            });
        }
        return this.closePromise;
    }
    ping() {
        if (this.websocket) {
            this.websocket.ping();
        }
    }
    isConnected() {
        return (this.websocket !== null && this.websocket.readyState === ws_1.default.OPEN);
    }
    setMetadata(key, value) {
        this.metadata.set(key, value);
    }
    getMetadata(key) {
        return this.metadata.get(key);
    }
    async refreshSession(sessionStore) {
        try {
            const sessionId = this.getMetadata("sessionId");
            if (!sessionId)
                return false;
            const session = await sessionStore.get(sessionId);
            if (!session) {
                // Session invalid - close connection
                this.close(1008, "Session expired");
                return false;
            }
            session.lastAccessedAt = new Date();
            return sessionStore.update(sessionId, session);
        }
        catch (error) {
            this.events?.onError(this.connectionId, error);
            return false;
        }
    }
    startSessionRefresh(sessionStore) {
        if (this.sessionRefreshTimer) {
            clearInterval(this.sessionRefreshTimer);
        }
        this.sessionRefreshTimer = setInterval(() => this.refreshSession(sessionStore), WebsocketConnection.SESSION_REFRESH_INTERVAL);
    }
    stopSessionRefresh() {
        if (this.sessionRefreshTimer) {
            clearInterval(this.sessionRefreshTimer);
            this.sessionRefreshTimer = undefined;
        }
    }
    // Static method for broadcasting to multiple connections
    static broadcast(message, connections) {
        connections.forEach((connection) => {
            if (connection.isConnected()) {
                connection.send(message);
            }
        });
    }
    getSessionId() {
        return this.getMetadata("sessionId");
    }
    getConnectionStatus() {
        return {
            connectionId: this.getConnectionId(),
            lastActivityTime: this.lastActivityTime,
            lastHeartbeatResponse: this.lastHeartbeatResponse,
            messageCount: this.messageCount,
            authenticated: this.isAuthenticated(),
            sessionId: this.getSessionId(),
            metadata: Object.fromEntries(this.metadata.entries()),
        };
    }
}
exports.WebsocketConnection = WebsocketConnection;
WebsocketConnection.MAX_MESSAGE_SIZE = 1024 * 1024; // 1MB
WebsocketConnection.SESSION_REFRESH_INTERVAL = 60000; // 1 minute
WebsocketConnection.FORCED_CLOSE_TIMEOUT = 5000; // 5 seconds
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2Vic29ja2V0Q29ubmVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9XZWJzb2NrZXRDb25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDRDQUEyQjtBQUUzQixtQ0FBb0M7QUFTcEMsTUFBYSxtQkFBbUI7SUFtQjlCLFlBQ1UsYUFHQyxFQUNELFdBQW9ELEVBQ3BELHVCQUErQixHQUFHLEVBQ2xDLE1BQXlCLEVBQ2pDLFNBQXFCLEVBQ2Isb0JBQTRCLEtBQUssRUFBRSxhQUFhO0lBQ2hELG1CQUEyQixJQUFJLENBQUMsWUFBWTs7UUFUNUMsa0JBQWEsR0FBYixhQUFhLENBR1o7UUFDRCxnQkFBVyxHQUFYLFdBQVcsQ0FBeUM7UUFDcEQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFjO1FBQ2xDLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBRXpCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBZ0I7UUFDakMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFlO1FBeEJqQywwQkFBcUIsR0FBVyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFLM0MsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFDekIsa0JBQWEsR0FBWSxLQUFLLENBQUM7UUFDL0IsYUFBUSxHQUFxQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLGNBQVMsR0FBcUIsSUFBSSxDQUFDO1FBQ25DLHdCQUFtQixHQUFZLEtBQUssQ0FBQztRQUNyQyxpQkFBWSxHQUF5QixJQUFJLENBQUM7UUFFMUMsb0JBQWUsR0FBVyxFQUFFLENBQUM7UUFjbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVuQyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENB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T0FBZSxFQUFFLFdBQWtDO1FBQ3pFLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNqQyxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO2dCQUM3QixVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sbUJBQW1CO1FBQ3hCLE9BQU87WUFDTCxZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNwQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxxQkFBcUI7WUFDakQsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLGFBQWEsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3JDLFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzlCLFFBQVEsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDdEQsQ0FBQztJQUNKLENBQUM7O0FBeFpILGtEQXlaQztBQXhaeUIsb0NBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUksQUFBZCxDQUFlLENBQUMsTUFBTTtBQUN0Qyw0Q0FBd0IsR0FBRyxLQUFLLEFBQVIsQ0FBUyxDQUFDLFdBQVc7QUFDN0Msd0NBQW9CLEdBQUcsSUFBSSxBQUFQLENBQVEsQ0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYlNvY2tldCBmcm9tIFwid3NcIjtcbmltcG9ydCB7IElTZXNzaW9uU3RvcmUsIElSZXF1ZXN0IH0gZnJvbSBcIi4uL2ludGVyZmFjZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tIFwiY3J5cHRvXCI7XG5pbXBvcnQgeyBIZWFydGJlYXRSZXF1ZXN0IH0gZnJvbSBcIi4vV2ViU29ja2V0U2VydmVyXCI7XG5cbmludGVyZmFjZSBDb25uZWN0aW9uRXZlbnRzIHtcbiAgb25SYXRlTGltaXQ6IChjb25uZWN0aW9uSWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgb25FcnJvcjogKGNvbm5lY3Rpb25JZDogc3RyaW5nLCBlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG4gIG9uU2VjdXJpdHlWaW9sYXRpb246IChjb25uZWN0aW9uSWQ6IHN0cmluZywgdmlvbGF0aW9uOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBXZWJzb2NrZXRDb25uZWN0aW9uIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTUFYX01FU1NBR0VfU0laRSA9IDEwMjQgKiAxMDI0OyAvLyAxTUJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU0VTU0lPTl9SRUZSRVNIX0lOVEVSVkFMID0gNjAwMDA7IC8vIDEgbWludXRlXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEZPUkNFRF9DTE9TRV9USU1FT1VUID0gNTAwMDsgLy8gNSBzZWNvbmRzXG5cbiAgcHJpdmF0ZSBsYXN0SGVhcnRiZWF0UmVzcG9uc2U6IG51bWJlciA9IERhdGUubm93KCk7XG4gIHByaXZhdGUgaGVhcnRiZWF0VGltZXI/OiBOb2RlSlMuVGltZW91dDtcbiAgcHJpdmF0ZSBoZWFydGJlYXRUaW1lb3V0VGltZXI/OiBOb2RlSlMuVGltZW91dDtcbiAgcHJpdmF0ZSBjb25uZWN0aW9uSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBsYXN0QWN0aXZpdHlUaW1lOiBudW1iZXI7XG4gIHByaXZhdGUgbWVzc2FnZUNvdW50OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGF1dGhlbnRpY2F0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBtZXRhZGF0YTogTWFwPHN0cmluZywgYW55PiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSB3ZWJzb2NrZXQ6IFdlYlNvY2tldCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGV2ZW50TGlzdGVuZXJzU2V0dXA6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBjbG9zZVByb21pc2U6IFByb21pc2U8dm9pZD4gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBzZXNzaW9uUmVmcmVzaFRpbWVyPzogTm9kZUpTLlRpbWVvdXQ7XG4gIHByaXZhdGUgbGFzdE1lc3NhZ2VIYXNoOiBzdHJpbmcgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaGFuZGxlTWVzc2FnZTogKFxuICAgICAgZGF0YTogV2ViU29ja2V0LkRhdGEsXG4gICAgICB3ZWJzb2NrZXQ6IFdlYnNvY2tldENvbm5lY3Rpb25cbiAgICApID0+IHZvaWQsXG4gICAgcHJpdmF0ZSBoYW5kbGVDbG9zZTogKGNvbm5lY3Rpb25JZDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+LFxuICAgIHByaXZhdGUgbWF4TWVzc2FnZXNQZXJNaW51dGU6IG51bWJlciA9IDEwMCxcbiAgICBwcml2YXRlIGV2ZW50cz86IENvbm5lY3Rpb25FdmVudHMsXG4gICAgd2Vic29ja2V0PzogV2ViU29ja2V0LFxuICAgIHByaXZhdGUgaGVhcnRiZWF0SW50ZXJ2YWw6IG51bWJlciA9IDMwMDAwLCAvLyAzMCBzZWNvbmRzXG4gICAgcHJpdmF0ZSBoZWFydGJlYXRUaW1lb3V0OiBudW1iZXIgPSA1MDAwIC8vIDUgc2Vjb25kc1xuICApIHtcbiAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgdGhpcy5sYXN0QWN0aXZpdHlUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIGlmICh3ZWJzb2NrZXQpIHtcbiAgICAgIHRoaXMuc2V0V2ViU29ja2V0KHdlYnNvY2tldCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGFydEhlYXJ0YmVhdCgpIHtcbiAgICBpZiAodGhpcy5oZWFydGJlYXRUaW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdFRpbWVyKTtcbiAgICB9XG5cbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5zZW5kSGVhcnRiZWF0KCk7XG4gICAgfSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbCk7XG4gIH1cblxuICBwcml2YXRlIHNlbmRIZWFydGJlYXQoKSB7XG4gICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFydGJlYXRSZXF1ZXN0OiBJUmVxdWVzdDxIZWFydGJlYXRSZXF1ZXN0PiA9IHtcbiAgICAgIGhlYWRlcjoge1xuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIHJlcXVlc3RJZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgcmVxdWVzdGVyQWRkcmVzczogdGhpcy5nZXRTZXNzaW9uSWQoKSB8fCB0aGlzLmNvbm5lY3Rpb25JZCxcbiAgICAgICAgcmVxdWVzdFR5cGU6IFwiaGVhcnRiZWF0XCIsXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB0aGlzLnNlbmQoSlNPTi5zdHJpbmdpZnkoaGVhcnRiZWF0UmVxdWVzdCkpO1xuXG4gICAgLy8gU2V0IHRpbWVvdXQgZm9yIHJlc3BvbnNlXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZXZlbnRzPy5vbkVycm9yKHRoaXMuY29ubmVjdGlvbklkLCBuZXcgRXJyb3IoXCJIZWFydGJlYXQgdGltZW91dFwiKSk7XG4gICAgICB0aGlzLmNsb3NlKDEwMDEsIFwiSGVhcnRiZWF0IHRpbWVvdXRcIik7XG4gICAgfSwgdGhpcy5oZWFydGJlYXRUaW1lb3V0KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRXZWJTb2NrZXQod2Vic29ja2V0OiBXZWJTb2NrZXQpIHtcbiAgICBpZiAodGhpcy53ZWJzb2NrZXQpIHtcbiAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIGNvbm5lY3Rpb24gZmlyc3RcbiAgICAgIHRoaXMuY2xlYW51cEV4aXN0aW5nQ29ubmVjdGlvbigpO1xuICAgIH1cblxuICAgIHRoaXMud2Vic29ja2V0ID0gd2Vic29ja2V0O1xuICAgIHRoaXMuc2V0dXBFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMubGFzdEFjdGl2aXR5VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAodGhpcy53ZWJzb2NrZXQgYXMgYW55KS5tYXhQYXlsb2FkID0gV2Vic29ja2V0Q29ubmVjdGlvbi5NQVhfTUVTU0FHRV9TSVpFO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhbnVwRXhpc3RpbmdDb25uZWN0aW9uKCkge1xuICAgIGlmICh0aGlzLndlYnNvY2tldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBiZWZvcmUgdGVybWluYXRpbmcgdG8gcHJldmVudCBhbnkgcmFjZSBjb25kaXRpb25zXG4gICAgICAgIHRoaXMud2Vic29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICBpZiAodGhpcy53ZWJzb2NrZXQucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0LkNMT1NFRCkge1xuICAgICAgICAgIHRoaXMud2Vic29ja2V0LnRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2Vic29ja2V0ID0gbnVsbDsgLy8gQ2xlYXIgdGhlIHJlZmVyZW5jZVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5ldmVudHM/Lm9uRXJyb3IodGhpcy5jb25uZWN0aW9uSWQsIGVycm9yIGFzIEVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldHVwRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKCF0aGlzLndlYnNvY2tldCB8fCB0aGlzLmV2ZW50TGlzdGVuZXJzU2V0dXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLndlYnNvY2tldC5vbihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVXZWJzb2NrZXRNZXNzYWdlcy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLndlYnNvY2tldC5vbihcImNsb3NlXCIsIHRoaXMuaGFuZGxlQ2xvc2VDb25uZWN0aW9uLmJpbmQodGhpcykpO1xuICAgIHRoaXMud2Vic29ja2V0Lm9uKFwicG9uZ1wiLCB0aGlzLmhhbmRsZVBvbmcuYmluZCh0aGlzKSk7XG4gICAgdGhpcy53ZWJzb2NrZXQub24oXCJlcnJvclwiLCB0aGlzLmhhbmRsZUVycm9yLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy53ZWJzb2NrZXQub24oXG4gICAgICBcInVuZXhwZWN0ZWQtcmVzcG9uc2VcIixcbiAgICAgIHRoaXMuaGFuZGxlVW5leHBlY3RlZFJlc3BvbnNlLmJpbmQodGhpcylcbiAgICApO1xuXG4gICAgdGhpcy5zdGFydEhlYXJ0YmVhdCgpO1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnNTZXR1cCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBFcnJvcikge1xuICAgIHRoaXMuZXZlbnRzPy5vbkVycm9yKHRoaXMuY29ubmVjdGlvbklkLCBlcnJvcik7XG4gICAgdGhpcy5jbG9zZSgxMDA2LCBcIkludGVybmFsIGVycm9yIG9jY3VycmVkXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVVbmV4cGVjdGVkUmVzcG9uc2UoKSB7XG4gICAgdGhpcy5ldmVudHM/Lm9uU2VjdXJpdHlWaW9sYXRpb24oXG4gICAgICB0aGlzLmNvbm5lY3Rpb25JZCxcbiAgICAgIFwiVW5leHBlY3RlZCByZXNwb25zZSByZWNlaXZlZFwiXG4gICAgKTtcbiAgICB0aGlzLmNsb3NlKDEwMDYsIFwiVW5leHBlY3RlZCByZXNwb25zZVwiKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlUG9uZygpIHtcbiAgICB0aGlzLmxhc3RBY3Rpdml0eVRpbWUgPSBEYXRlLm5vdygpO1xuICB9XG5cbiAgcHVibGljIHNlbmQobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLndlYnNvY2tldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNlbmQgbWVzc2FnZTogV2ViU29ja2V0IG5vdCBpbml0aWFsaXplZFwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgbWVzc2FnZSBzaXplIGJlZm9yZSBzZW5kaW5nXG4gICAgICBjb25zdCBtZXNzYWdlU2l6ZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKG1lc3NhZ2UpO1xuICAgICAgaWYgKG1lc3NhZ2VTaXplID4gV2Vic29ja2V0Q29ubmVjdGlvbi5NQVhfTUVTU0FHRV9TSVpFKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgZXhjZWVkcyBtYXhpbXVtIHNpemUgbGltaXRcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMud2Vic29ja2V0LnNlbmQobWVzc2FnZSk7XG4gICAgICB0aGlzLmxhc3RBY3Rpdml0eVRpbWUgPSBEYXRlLm5vdygpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmV2ZW50cz8ub25FcnJvcih0aGlzLmNvbm5lY3Rpb25JZCwgZXJyb3IgYXMgRXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDbG9zZUNvbm5lY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuY29ubmVjdGlvbklkKSB7XG4gICAgICB0aGlzLmhhbmRsZUNsb3NlKHRoaXMuY29ubmVjdGlvbklkKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgdGhpcy5ldmVudHM/Lm9uRXJyb3IodGhpcy5jb25uZWN0aW9uSWQsIGVycm9yIGFzIEVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlV2Vic29ja2V0TWVzc2FnZXMobWVzc2FnZTogV2ViU29ja2V0LkRhdGEpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sYXN0QWN0aXZpdHlUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgLy8gU2l6ZSBjaGVja1xuICAgICAgY29uc3QgbWVzc2FnZVNpemUgPSB0aGlzLmdldERhdGFTaXplKG1lc3NhZ2UpO1xuICAgICAgaWYgKG1lc3NhZ2VTaXplID4gV2Vic29ja2V0Q29ubmVjdGlvbi5NQVhfTUVTU0FHRV9TSVpFKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzPy5vblNlY3VyaXR5VmlvbGF0aW9uKFxuICAgICAgICAgIHRoaXMuY29ubmVjdGlvbklkLFxuICAgICAgICAgIFwiTWVzc2FnZSBzaXplIGV4Y2VlZGVkXCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6IFwiTWVzc2FnZSB0b28gbGFyZ2VcIiB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmF0ZSBsaW1pdGluZ1xuICAgICAgaWYgKHRoaXMuaXNSYXRlTGltaXRlZCgpKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzPy5vblJhdGVMaW1pdCh0aGlzLmNvbm5lY3Rpb25JZCk7XG4gICAgICAgIHRoaXMuc2VuZChKU09OLnN0cmluZ2lmeSh7IGVycm9yOiBcIlJhdGUgbGltaXQgZXhjZWVkZWRcIiB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRGV0ZWN0IG1lc3NhZ2UgcmVwbGF5IGF0dGFja3NcbiAgICAgIGNvbnN0IG1lc3NhZ2VTdHJpbmcgPSB0aGlzLmRhdGFUb1N0cmluZyhtZXNzYWdlKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VIYXNoID0gdGhpcy5jYWxjdWxhdGVNZXNzYWdlSGFzaChtZXNzYWdlU3RyaW5nKTtcbiAgICAgIGlmIChtZXNzYWdlSGFzaCA9PT0gdGhpcy5sYXN0TWVzc2FnZUhhc2gpIHtcbiAgICAgICAgdGhpcy5ldmVudHM/Lm9uU2VjdXJpdHlWaW9sYXRpb24oXG4gICAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQsXG4gICAgICAgICAgXCJQb3NzaWJsZSByZXBsYXkgYXR0YWNrXCJcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sYXN0TWVzc2FnZUhhc2ggPSBtZXNzYWdlSGFzaDtcblxuICAgICAgdGhpcy5tZXNzYWdlQ291bnQrKztcblxuICAgICAgLy9UT0RPOiBsb29rIGZvciBhIG1vcmUgcGVyZm9ybWFudCB3YXkgdG8gZGV0ZXJtaW5lIGlmIG1lc3NhZ2UgaXMgaGVhcnRiZWF0IHJlc3BvbnNlICh3aXRob3V0IEpTT04ucGFyc2UgaXQpXG4gICAgICBjb25zdCBwYXJzZWRNZXNzYWdlID0gSlNPTi5wYXJzZSh0aGlzLmRhdGFUb1N0cmluZyhtZXNzYWdlKSk7XG5cbiAgICAgIC8vIENoZWNrIGlmIGl0J3MgYSBoZWFydGJlYXQgcmVzcG9uc2VcbiAgICAgIGlmIChcbiAgICAgICAgcGFyc2VkTWVzc2FnZT8ucmVxdWVzdEhlYWRlcj8ucmVxdWVzdFR5cGUgPT09IFwiaGVhcnRiZWF0XCIgJiZcbiAgICAgICAgcGFyc2VkTWVzc2FnZT8uYm9keT8uc3VjY2Vzc1xuICAgICAgKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lcik7XG4gICAgICAgIHRoaXMubGFzdEhlYXJ0YmVhdFJlc3BvbnNlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmhhbmRsZU1lc3NhZ2UobWVzc2FnZSwgdGhpcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuZXZlbnRzPy5vbkVycm9yKHRoaXMuY29ubmVjdGlvbklkLCBlcnJvciBhcyBFcnJvcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVNZXNzYWdlSGFzaChtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG4gIH1cblxuICBwcml2YXRlIGRhdGFUb1N0cmluZyhkYXRhOiBXZWJTb2NrZXQuRGF0YSk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoZGF0YSkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBwcml2YXRlIGdldERhdGFTaXplKGRhdGE6IFdlYlNvY2tldC5EYXRhKTogbnVtYmVyIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKTtcbiAgICB9XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIHJldHVybiBkYXRhLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLnJlZHVjZSgoYWNjLCBidWYpID0+IGFjYyArIGJ1Zi5sZW5ndGgsIDApO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHByaXZhdGUgaXNSYXRlTGltaXRlZCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBvbmVNaW51dGVBZ28gPSBEYXRlLm5vdygpIC0gNjAwMDA7XG4gICAgaWYgKFxuICAgICAgdGhpcy5tZXNzYWdlQ291bnQgPiB0aGlzLm1heE1lc3NhZ2VzUGVyTWludXRlICYmXG4gICAgICB0aGlzLmxhc3RBY3Rpdml0eVRpbWUgPiBvbmVNaW51dGVBZ29cbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYXN0QWN0aXZpdHlUaW1lIDw9IG9uZU1pbnV0ZUFnbykge1xuICAgICAgdGhpcy5tZXNzYWdlQ291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q29ubmVjdGlvbklkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25JZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXRBdXRoZW50aWNhdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5hdXRoZW50aWNhdGVkID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgaXNBdXRoZW50aWNhdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhlbnRpY2F0ZWQ7XG4gIH1cblxuICBwdWJsaWMgY2xvc2UoY29kZT86IG51bWJlciwgcmVhc29uPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmNsb3NlUHJvbWlzZSkge1xuICAgICAgdGhpcy5jbG9zZVByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLnN0b3BTZXNzaW9uUmVmcmVzaCgpO1xuXG4gICAgICAgIGlmICghdGhpcy53ZWJzb2NrZXQgfHwgdGhpcy53ZWJzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0LkNMT1NFRCkge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY2xlYW51cEV4aXN0aW5nQ29ubmVjdGlvbigpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbW1lZGlhdGVseSB0ZXJtaW5hdGUgYWZ0ZXIgdGltZW91dCBpbnN0ZWFkIG9mIHdhaXRpbmdcbiAgICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMud2Vic29ja2V0KSB7XG4gICAgICAgICAgICB0aGlzLndlYnNvY2tldC50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIFdlYnNvY2tldENvbm5lY3Rpb24uRk9SQ0VEX0NMT1NFX1RJTUVPVVQpO1xuXG4gICAgICAgIHRoaXMud2Vic29ja2V0Lm9uY2UoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5oZWFydGJlYXRUaW1lcikge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5oZWFydGJlYXRUaW1lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYXRlIGdyYWNlZnVsIGNsb3NlXG4gICAgICAgIHRoaXMud2Vic29ja2V0LmNsb3NlKGNvZGUsIHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jbG9zZVByb21pc2U7XG4gIH1cblxuICBwdWJsaWMgcGluZygpIHtcbiAgICBpZiAodGhpcy53ZWJzb2NrZXQpIHtcbiAgICAgIHRoaXMud2Vic29ja2V0LnBpbmcoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXNDb25uZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMud2Vic29ja2V0ICE9PSBudWxsICYmIHRoaXMud2Vic29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOXG4gICAgKTtcbiAgfVxuXG4gIHNldE1ldGFkYXRhKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5tZXRhZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBnZXRNZXRhZGF0YShrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMubWV0YWRhdGEuZ2V0KGtleSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVmcmVzaFNlc3Npb24oc2Vzc2lvblN0b3JlOiBJU2Vzc2lvblN0b3JlKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlc3Npb25JZCA9IHRoaXMuZ2V0TWV0YWRhdGEoXCJzZXNzaW9uSWRcIik7XG4gICAgICBpZiAoIXNlc3Npb25JZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgc2Vzc2lvblN0b3JlLmdldChzZXNzaW9uSWQpO1xuICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgIC8vIFNlc3Npb24gaW52YWxpZCAtIGNsb3NlIGNvbm5lY3Rpb25cbiAgICAgICAgdGhpcy5jbG9zZSgxMDA4LCBcIlNlc3Npb24gZXhwaXJlZFwiKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzZXNzaW9uLmxhc3RBY2Nlc3NlZEF0ID0gbmV3IERhdGUoKTtcbiAgICAgIHJldHVybiBzZXNzaW9uU3RvcmUudXBkYXRlKHNlc3Npb25JZCwgc2Vzc2lvbik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuZXZlbnRzPy5vbkVycm9yKHRoaXMuY29ubmVjdGlvbklkLCBlcnJvciBhcyBFcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXJ0U2Vzc2lvblJlZnJlc2goc2Vzc2lvblN0b3JlOiBJU2Vzc2lvblN0b3JlKSB7XG4gICAgaWYgKHRoaXMuc2Vzc2lvblJlZnJlc2hUaW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNlc3Npb25SZWZyZXNoVGltZXIpO1xuICAgIH1cblxuICAgIHRoaXMuc2Vzc2lvblJlZnJlc2hUaW1lciA9IHNldEludGVydmFsKFxuICAgICAgKCkgPT4gdGhpcy5yZWZyZXNoU2Vzc2lvbihzZXNzaW9uU3RvcmUpLFxuICAgICAgV2Vic29ja2V0Q29ubmVjdGlvbi5TRVNTSU9OX1JFRlJFU0hfSU5URVJWQUxcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0b3BTZXNzaW9uUmVmcmVzaCgpIHtcbiAgICBpZiAodGhpcy5zZXNzaW9uUmVmcmVzaFRpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuc2Vzc2lvblJlZnJlc2hUaW1lcik7XG4gICAgICB0aGlzLnNlc3Npb25SZWZyZXNoVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljIG1ldGhvZCBmb3IgYnJvYWRjYXN0aW5nIHRvIG11bHRpcGxlIGNvbm5lY3Rpb25zXG4gIHB1YmxpYyBzdGF0aWMgYnJvYWRjYXN0KG1lc3NhZ2U6IHN0cmluZywgY29ubmVjdGlvbnM6IFdlYnNvY2tldENvbm5lY3Rpb25bXSkge1xuICAgIGNvbm5lY3Rpb25zLmZvckVhY2goKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgIGlmIChjb25uZWN0aW9uLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgY29ubmVjdGlvbi5zZW5kKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFNlc3Npb25JZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmdldE1ldGFkYXRhKFwic2Vzc2lvbklkXCIpO1xuICB9XG5cbiAgcHVibGljIGdldENvbm5lY3Rpb25TdGF0dXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbm5lY3Rpb25JZDogdGhpcy5nZXRDb25uZWN0aW9uSWQoKSxcbiAgICAgIGxhc3RBY3Rpdml0eVRpbWU6IHRoaXMubGFzdEFjdGl2aXR5VGltZSxcbiAgICAgIGxhc3RIZWFydGJlYXRSZXNwb25zZTogdGhpcy5sYXN0SGVhcnRiZWF0UmVzcG9uc2UsXG4gICAgICBtZXNzYWdlQ291bnQ6IHRoaXMubWVzc2FnZUNvdW50LFxuICAgICAgYXV0aGVudGljYXRlZDogdGhpcy5pc0F1dGhlbnRpY2F0ZWQoKSxcbiAgICAgIHNlc3Npb25JZDogdGhpcy5nZXRTZXNzaW9uSWQoKSxcbiAgICAgIG1ldGFkYXRhOiBPYmplY3QuZnJvbUVudHJpZXModGhpcy5tZXRhZGF0YS5lbnRyaWVzKCkpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==