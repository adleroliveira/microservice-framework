"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsocketConnection = void 0;
const ws_1 = __importDefault(require("ws"));
class WebsocketConnection {
    constructor(handleMessage, handleClose, inactivityTimeout = 300000, // 5 minutes
    maxMessagesPerMinute = 100, websocket) {
        this.handleMessage = handleMessage;
        this.handleClose = handleClose;
        this.inactivityTimeout = inactivityTimeout;
        this.maxMessagesPerMinute = maxMessagesPerMinute;
        this.messageCount = 0;
        this.authenticated = false;
        this.metadata = new Map();
        this.websocket = null;
        this.eventListenersSetup = false;
        this.connectionId = crypto.randomUUID();
        this.lastActivityTime = Date.now();
        if (websocket) {
            this.setWebSocket(websocket);
        }
        this.startInactivityTimer();
    }
    setWebSocket(websocket) {
        this.websocket = websocket;
        this.setupEventListeners();
        this.lastActivityTime = Date.now();
    }
    setupEventListeners() {
        if (!this.websocket || this.eventListenersSetup) {
            return;
        }
        this.websocket.on("message", this.handleWebsocketMessages.bind(this));
        this.websocket.on("close", this.handleCloseConnection.bind(this));
        this.websocket.on("pong", this.handlePong.bind(this));
        this.eventListenersSetup = true;
    }
    startInactivityTimer() {
        setInterval(() => {
            if (Date.now() - this.lastActivityTime > this.inactivityTimeout) {
                this.close(1000, "Connection timed out due to inactivity");
            }
        }, 60000); // Check every minute
    }
    handlePong() {
        this.lastActivityTime = Date.now();
    }
    send(message) {
        if (!this.websocket) {
            throw new Error("Cannot send message: WebSocket not initialized");
        }
        this.websocket.send(message);
        this.lastActivityTime = Date.now();
    }
    handleCloseConnection() {
        this.handleClose(this.connectionId);
    }
    handleWebsocketMessages(message) {
        this.lastActivityTime = Date.now();
        if (this.isRateLimited()) {
            this.send("Rate limit exceeded. Please slow down.");
            return;
        }
        this.messageCount++;
        this.handleMessage(message, this);
    }
    isRateLimited() {
        const oneMinuteAgo = Date.now() - 60000;
        if (this.messageCount > this.maxMessagesPerMinute &&
            this.lastActivityTime > oneMinuteAgo) {
            return true;
        }
        if (this.lastActivityTime <= oneMinuteAgo) {
            this.messageCount = 0;
        }
        return false;
    }
    getConnectionId() {
        return this.connectionId;
    }
    setAuthenticated(value) {
        this.authenticated = value;
    }
    isAuthenticated() {
        return this.authenticated;
    }
    close(code, reason) {
        if (this.websocket) {
            this.websocket.close(code, reason);
        }
    }
    ping() {
        if (this.websocket) {
            this.websocket.ping();
        }
    }
    isConnected() {
        return (this.websocket !== null && this.websocket.readyState === ws_1.default.OPEN);
    }
    setMetadata(key, value) {
        this.metadata.set(key, value);
    }
    getMetadata(key) {
        return this.metadata.get(key);
    }
    async refreshSession(sessionStore) {
        const sessionId = this.getMetadata("sessionId");
        if (!sessionId)
            return false;
        const session = await sessionStore.get(sessionId);
        if (!session)
            return false;
        session.lastAccessedAt = new Date();
        return sessionStore.update(sessionId, session);
    }
    // Static method for broadcasting to multiple connections
    static broadcast(message, connections) {
        connections.forEach((connection) => {
            if (connection.isConnected()) {
                connection.send(message);
            }
        });
    }
}
exports.WebsocketConnection = WebsocketConnection;
//# sourceMappingURL=data:application/json;base64,