"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsocketConnection = void 0;
const uuid_1 = require("uuid");
class WebsocketConnection {
    constructor(websocket, handleMessage, handleClose, inactivityTimeout = 300000, // 5 minutes
    maxMessagesPerMinute = 100) {
        this.websocket = websocket;
        this.handleMessage = handleMessage;
        this.handleClose = handleClose;
        this.inactivityTimeout = inactivityTimeout;
        this.maxMessagesPerMinute = maxMessagesPerMinute;
        this.messageCount = 0;
        this.authenticated = false;
        this.connectionId = (0, uuid_1.v4)();
        this.lastActivityTime = Date.now();
        this.setupEventListeners();
        this.startInactivityTimer();
    }
    setupEventListeners() {
        this.websocket.on("message", this.handleWebsocketMessages.bind(this));
        this.websocket.on("close", this.handleCloseConnection.bind(this));
        this.websocket.on("pong", this.handlePong.bind(this));
    }
    startInactivityTimer() {
        setInterval(() => {
            if (Date.now() - this.lastActivityTime > this.inactivityTimeout) {
                this.close(1000, "Connection timed out due to inactivity");
            }
        }, 60000); // Check every minute
    }
    handlePong() {
        this.lastActivityTime = Date.now();
    }
    send(message) {
        this.websocket.send(message);
        this.lastActivityTime = Date.now();
    }
    handleCloseConnection() {
        this.handleClose(this.connectionId);
    }
    handleWebsocketMessages(message) {
        this.lastActivityTime = Date.now();
        if (this.isRateLimited()) {
            this.send("Rate limit exceeded. Please slow down.");
            return;
        }
        this.messageCount++;
        this.handleMessage(message, this);
    }
    isRateLimited() {
        const oneMinuteAgo = Date.now() - 60000;
        if (this.messageCount > this.maxMessagesPerMinute &&
            this.lastActivityTime > oneMinuteAgo) {
            return true;
        }
        if (this.lastActivityTime <= oneMinuteAgo) {
            this.messageCount = 0;
        }
        return false;
    }
    getConnectionId() {
        return this.connectionId;
    }
    setAuthenticated(value) {
        this.authenticated = value;
    }
    isAuthenticated() {
        return this.authenticated;
    }
    close(code, reason) {
        this.websocket.close(code, reason);
    }
    ping() {
        this.websocket.ping();
    }
    // Static method for broadcasting to multiple connections
    static broadcast(message, connections) {
        connections.forEach((connection) => connection.send(message));
    }
}
exports.WebsocketConnection = WebsocketConnection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2Vic29ja2V0Q29ubmVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9XZWJzb2NrZXRDb25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLCtCQUFvQztBQUVwQyxNQUFhLG1CQUFtQjtJQU05QixZQUNVLFNBQW9CLEVBQ3BCLGFBR0MsRUFDRCxXQUEyQyxFQUMzQyxvQkFBNEIsTUFBTSxFQUFFLFlBQVk7SUFDaEQsdUJBQStCLEdBQUc7UUFQbEMsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixrQkFBYSxHQUFiLGFBQWEsQ0FHWjtRQUNELGdCQUFXLEdBQVgsV0FBVyxDQUFnQztRQUMzQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQWlCO1FBQ2xDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBYztRQVhwQyxpQkFBWSxHQUFXLENBQUMsQ0FBQztRQUN6QixrQkFBYSxHQUFZLEtBQUssQ0FBQztRQVlyQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUEsU0FBTSxHQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7Z0JBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLHdDQUF3QyxDQUFDLENBQUM7WUFDN0QsQ0FBQztRQUNILENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtJQUNsQyxDQUFDO0lBRU8sVUFBVTtRQUNoQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBZTtRQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTyxxQkFBcUI7UUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVPLHVCQUF1QixDQUFDLE9BQXVCO1FBQ3JELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7WUFDcEQsT0FBTztRQUNULENBQUM7UUFDRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVPLGFBQWE7UUFDbkIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUN4QyxJQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLG9CQUFvQjtZQUM3QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxFQUNwQyxDQUFDO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksWUFBWSxFQUFFLENBQUM7WUFDMUMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVNLGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxLQUFjO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFFTSxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQWEsRUFBRSxNQUFlO1FBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELHlEQUF5RDtJQUNsRCxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQWUsRUFBRSxXQUFrQztRQUN6RSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztDQUNGO0FBakdELGtEQWlHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWJTb2NrZXQgZnJvbSBcIndzXCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xuXG5leHBvcnQgY2xhc3MgV2Vic29ja2V0Q29ubmVjdGlvbiB7XG4gIHByaXZhdGUgY29ubmVjdGlvbklkOiBzdHJpbmc7XG4gIHByaXZhdGUgbGFzdEFjdGl2aXR5VGltZTogbnVtYmVyO1xuICBwcml2YXRlIG1lc3NhZ2VDb3VudDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBhdXRoZW50aWNhdGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB3ZWJzb2NrZXQ6IFdlYlNvY2tldCxcbiAgICBwcml2YXRlIGhhbmRsZU1lc3NhZ2U6IChcbiAgICAgIGRhdGE6IFdlYlNvY2tldC5EYXRhLFxuICAgICAgd2Vic29ja2V0OiBXZWJzb2NrZXRDb25uZWN0aW9uXG4gICAgKSA9PiB2b2lkLFxuICAgIHByaXZhdGUgaGFuZGxlQ2xvc2U6IChjb25uZWN0aW9uSWQ6IHN0cmluZykgPT4gdm9pZCxcbiAgICBwcml2YXRlIGluYWN0aXZpdHlUaW1lb3V0OiBudW1iZXIgPSAzMDAwMDAsIC8vIDUgbWludXRlc1xuICAgIHByaXZhdGUgbWF4TWVzc2FnZXNQZXJNaW51dGU6IG51bWJlciA9IDEwMFxuICApIHtcbiAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IHV1aWR2NCgpO1xuICAgIHRoaXMubGFzdEFjdGl2aXR5VGltZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5zdGFydEluYWN0aXZpdHlUaW1lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMud2Vic29ja2V0Lm9uKFwibWVzc2FnZVwiLCB0aGlzLmhhbmRsZVdlYnNvY2tldE1lc3NhZ2VzLmJpbmQodGhpcykpO1xuICAgIHRoaXMud2Vic29ja2V0Lm9uKFwiY2xvc2VcIiwgdGhpcy5oYW5kbGVDbG9zZUNvbm5lY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy53ZWJzb2NrZXQub24oXCJwb25nXCIsIHRoaXMuaGFuZGxlUG9uZy5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRJbmFjdGl2aXR5VGltZXIoKSB7XG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKERhdGUubm93KCkgLSB0aGlzLmxhc3RBY3Rpdml0eVRpbWUgPiB0aGlzLmluYWN0aXZpdHlUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuY2xvc2UoMTAwMCwgXCJDb25uZWN0aW9uIHRpbWVkIG91dCBkdWUgdG8gaW5hY3Rpdml0eVwiKTtcbiAgICAgIH1cbiAgICB9LCA2MDAwMCk7IC8vIENoZWNrIGV2ZXJ5IG1pbnV0ZVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVQb25nKCkge1xuICAgIHRoaXMubGFzdEFjdGl2aXR5VGltZSA9IERhdGUubm93KCk7XG4gIH1cblxuICBwdWJsaWMgc2VuZChtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLndlYnNvY2tldC5zZW5kKG1lc3NhZ2UpO1xuICAgIHRoaXMubGFzdEFjdGl2aXR5VGltZSA9IERhdGUubm93KCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNsb3NlQ29ubmVjdGlvbigpIHtcbiAgICB0aGlzLmhhbmRsZUNsb3NlKHRoaXMuY29ubmVjdGlvbklkKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlV2Vic29ja2V0TWVzc2FnZXMobWVzc2FnZTogV2ViU29ja2V0LkRhdGEpIHtcbiAgICB0aGlzLmxhc3RBY3Rpdml0eVRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGlmICh0aGlzLmlzUmF0ZUxpbWl0ZWQoKSkge1xuICAgICAgdGhpcy5zZW5kKFwiUmF0ZSBsaW1pdCBleGNlZWRlZC4gUGxlYXNlIHNsb3cgZG93bi5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZUNvdW50Kys7XG4gICAgdGhpcy5oYW5kbGVNZXNzYWdlKG1lc3NhZ2UsIHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1JhdGVMaW1pdGVkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG9uZU1pbnV0ZUFnbyA9IERhdGUubm93KCkgLSA2MDAwMDtcbiAgICBpZiAoXG4gICAgICB0aGlzLm1lc3NhZ2VDb3VudCA+IHRoaXMubWF4TWVzc2FnZXNQZXJNaW51dGUgJiZcbiAgICAgIHRoaXMubGFzdEFjdGl2aXR5VGltZSA+IG9uZU1pbnV0ZUFnb1xuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLmxhc3RBY3Rpdml0eVRpbWUgPD0gb25lTWludXRlQWdvKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VDb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb25uZWN0aW9uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbklkO1xuICB9XG5cbiAgcHVibGljIHNldEF1dGhlbnRpY2F0ZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmF1dGhlbnRpY2F0ZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBpc0F1dGhlbnRpY2F0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aGVudGljYXRlZDtcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZShjb2RlPzogbnVtYmVyLCByZWFzb24/OiBzdHJpbmcpIHtcbiAgICB0aGlzLndlYnNvY2tldC5jbG9zZShjb2RlLCByZWFzb24pO1xuICB9XG5cbiAgcHVibGljIHBpbmcoKSB7XG4gICAgdGhpcy53ZWJzb2NrZXQucGluZygpO1xuICB9XG5cbiAgLy8gU3RhdGljIG1ldGhvZCBmb3IgYnJvYWRjYXN0aW5nIHRvIG11bHRpcGxlIGNvbm5lY3Rpb25zXG4gIHB1YmxpYyBzdGF0aWMgYnJvYWRjYXN0KG1lc3NhZ2U6IHN0cmluZywgY29ubmVjdGlvbnM6IFdlYnNvY2tldENvbm5lY3Rpb25bXSkge1xuICAgIGNvbm5lY3Rpb25zLmZvckVhY2goKGNvbm5lY3Rpb24pID0+IGNvbm5lY3Rpb24uc2VuZChtZXNzYWdlKSk7XG4gIH1cbn1cbiJdfQ==