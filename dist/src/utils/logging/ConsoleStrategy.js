"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleStrategy = void 0;
const LogStrategy_1 = require("./LogStrategy");
const chalk_1 = __importDefault(require("chalk"));
var LogLevel;
(function (LogLevel) {
    LogLevel["INFO"] = "INFO";
    LogLevel["WARN"] = "WARN";
    LogLevel["ERROR"] = "ERROR";
    LogLevel["DEBUG"] = "DEBUG";
})(LogLevel || (LogLevel = {}));
class ConsoleStrategy extends LogStrategy_1.LogStrategy {
    constructor(maxStringLength = 5000, maxDepth = 10) {
        super();
        this.MAX_STRING_LENGTH = maxStringLength;
        this.MAX_DEPTH = maxDepth;
    }
    isLogMessage(body) {
        return (typeof body === "object" &&
            body !== null &&
            "timestamp" in body &&
            "level" in body &&
            "message" in body);
    }
    async sendPackaged(packagedMessage, options) {
        const { header, body } = packagedMessage;
        const logLevel = options?.logLevel || LogLevel.INFO;
        const formattedMessage = this.isLogMessage(body)
            ? this.formatLogMessage(body, header.requestId)
            : this.formatGenericMessage(body, logLevel, header.timestamp, header.requestId);
        console.log(formattedMessage);
    }
    formatLogMessage(logMessage, requestId) {
        const { sender, timestamp, level, message, payload } = logMessage;
        const logLevel = level.toUpperCase();
        const color = ConsoleStrategy.LOG_COLORS[logLevel] || chalk_1.default.white;
        let formattedMessage = color(`[${logLevel}] ${new Date(timestamp).toISOString()}` // - RequestID: ${requestId}`
        );
        if (sender) {
            formattedMessage += color(` [${sender}]`);
        }
        formattedMessage += color(` - ${message}`);
        if (payload) {
            formattedMessage += "\n" + this.formatPayload(payload, "  ");
        }
        return formattedMessage;
    }
    formatGenericMessage(message, logLevel, timestamp, requestId) {
        const color = ConsoleStrategy.LOG_COLORS[logLevel];
        let formattedMessage = color(`[${logLevel}] ${new Date(timestamp).toISOString()} - RequestID: ${requestId} - `);
        if (typeof message === "object" && message !== null) {
            formattedMessage += "\n" + this.formatPayload(message, "  ");
        }
        else {
            formattedMessage += message;
        }
        return formattedMessage;
    }
    formatPayload(payload, indent = "") {
        if (typeof payload !== "object" || payload === null) {
            return `${indent}${payload}`;
        }
        return Object.entries(payload)
            .map(([key, value]) => {
            if (typeof value === "object" && value !== null) {
                return `${indent}${key}:\n${this.formatPayload(value, indent + "  ")}`;
            }
            return `${indent}${key}: ${value}`;
        })
            .join("\n");
    }
    async log(message, logLevel = LogLevel.INFO) {
        await this.send(message, { logLevel });
    }
    async info(message) {
        await this.log(message, LogLevel.INFO);
    }
    async warn(message) {
        await this.log(message, LogLevel.WARN);
    }
    async error(message) {
        await this.log(message, LogLevel.ERROR);
    }
    async debug(message) {
        await this.log(message, LogLevel.DEBUG);
    }
}
exports.ConsoleStrategy = ConsoleStrategy;
ConsoleStrategy.LOG_COLORS = {
    [LogLevel.INFO]: chalk_1.default.blue,
    [LogLevel.WARN]: chalk_1.default.yellow,
    [LogLevel.ERROR]: chalk_1.default.red,
    [LogLevel.DEBUG]: chalk_1.default.green,
};
//# sourceMappingURL=data:application/json;base64,