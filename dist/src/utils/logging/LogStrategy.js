"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleStrategy = exports.LogStrategy = void 0;
const Loggable_1 = require("../logging/Loggable");
const uuid_1 = require("uuid");
class LogStrategy {
    async send(message, options) {
        const truncatedMessage = LogStrategy.truncateAndStringify(message, 0, this.MAX_STRING_LENGTH, this.MAX_DEPTH);
        const packagedMessage = {
            header: this.createRequestHeader(),
            body: truncatedMessage,
        };
        await this.sendPackaged(packagedMessage, options);
    }
    createRequestHeader() {
        return {
            timestamp: Date.now(),
            requestId: (0, uuid_1.v4)(),
            requesterAddress: "log-strategy",
            requestType: "LOG::MESSAGE",
        };
    }
    static truncateAndStringify(value, depth = 0, maxStringLength = 5000, maxDepth = 10) {
        if (depth > maxDepth) {
            return "[Object depth limit exceeded]";
        }
        if (value === undefined || value === null) {
            return value;
        }
        if (typeof value === "string") {
            return value.length > maxStringLength
                ? value.substring(0, maxStringLength) + "..."
                : value;
        }
        if (typeof value === "number" || typeof value === "boolean") {
            return value;
        }
        if (value instanceof Error) {
            return {
                name: value.name,
                message: this.truncateAndStringify(value.message),
                stack: this.truncateAndStringify(value.stack),
            };
        }
        if (Buffer.isBuffer(value) || ArrayBuffer.isView(value)) {
            return `[Binary data of length ${value.byteLength}]`;
        }
        if (Array.isArray(value)) {
            return value.map((item) => this.truncateAndStringify(item, depth + 1));
        }
        if (typeof value === "object") {
            const truncatedObject = {};
            for (const [key, prop] of Object.entries(value)) {
                truncatedObject[key] = this.truncateAndStringify(prop, depth + 1);
            }
            return truncatedObject;
        }
        return "[Unserializable data]";
    }
}
exports.LogStrategy = LogStrategy;
class ConsoleStrategy extends LogStrategy {
    constructor(maxStringLength, maxDepth) {
        super();
        if (maxStringLength)
            this.MAX_STRING_LENGTH = maxStringLength;
        if (maxDepth)
            this.MAX_DEPTH = maxDepth;
    }
    async sendPackaged(packagedMessage, options) {
        const formattedMessage = Loggable_1.Loggable.FormatLogMessage(packagedMessage.body);
        console.log(formattedMessage);
        // If there are additional options, log them separately
        if (options && Object.keys(options).length > 0) {
            console.log("Additional options:", options);
        }
    }
}
exports.ConsoleStrategy = ConsoleStrategy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nU3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvbG9nZ2luZy9Mb2dTdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrREFBK0M7QUFFL0MsK0JBQW9DO0FBRXBDLE1BQXNCLFdBQVc7SUFTL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFZLEVBQUUsT0FBNkI7UUFDcEQsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsb0JBQW9CLENBQ3ZELE9BQU8sRUFDUCxDQUFDLEVBQ0QsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixJQUFJLENBQUMsU0FBUyxDQUNmLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBa0I7WUFDckMsTUFBTSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUNsQyxJQUFJLEVBQUUsZ0JBQWdCO1NBQ3ZCLENBQUM7UUFFRixNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFUyxtQkFBbUI7UUFDM0IsT0FBTztZQUNMLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3JCLFNBQVMsRUFBRSxJQUFBLFNBQU0sR0FBRTtZQUNuQixnQkFBZ0IsRUFBRSxjQUFjO1lBQ2hDLFdBQVcsRUFBRSxjQUFjO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLG9CQUFvQixDQUN6QixLQUFVLEVBQ1YsUUFBZ0IsQ0FBQyxFQUNqQixlQUFlLEdBQUcsSUFBSSxFQUN0QixRQUFRLEdBQUcsRUFBRTtRQUViLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFDO1lBQ3JCLE9BQU8sK0JBQStCLENBQUM7UUFDekMsQ0FBQztRQUVELElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDMUMsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM5QixPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsZUFBZTtnQkFDbkMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxHQUFHLEtBQUs7Z0JBQzdDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDWixDQUFDO1FBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDNUQsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFLENBQUM7WUFDM0IsT0FBTztnQkFDTCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ2hCLE9BQU8sRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztnQkFDakQsS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQzlDLENBQUM7UUFDSixDQUFDO1FBRUQsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN4RCxPQUFPLDBCQUEwQixLQUFLLENBQUMsVUFBVSxHQUFHLENBQUM7UUFDdkQsQ0FBQztRQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM5QixNQUFNLGVBQWUsR0FBMkIsRUFBRSxDQUFDO1lBQ25ELEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2hELGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNwRSxDQUFDO1lBQ0QsT0FBTyxlQUFlLENBQUM7UUFDekIsQ0FBQztRQUVELE9BQU8sdUJBQXVCLENBQUM7SUFDakMsQ0FBQztDQUNGO0FBcEZELGtDQW9GQztBQUVELE1BQWEsZUFBZ0IsU0FBUSxXQUFXO0lBQzlDLFlBQVksZUFBd0IsRUFBRSxRQUFpQjtRQUNyRCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksZUFBZTtZQUFFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUM7UUFDOUQsSUFBSSxRQUFRO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDMUMsQ0FBQztJQUVTLEtBQUssQ0FBQyxZQUFZLENBQzFCLGVBQThCLEVBQzlCLE9BQTZCO1FBRTdCLE1BQU0sZ0JBQWdCLEdBQUcsbUJBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTlCLHVEQUF1RDtRQUN2RCxJQUFJLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFuQkQsMENBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nZ2FibGUgfSBmcm9tIFwiLi4vbG9nZ2luZy9Mb2dnYWJsZVwiO1xuaW1wb3J0IHsgSVJlcXVlc3QsIElSZXF1ZXN0SGVhZGVyIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXNcIjtcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMb2dTdHJhdGVneSB7XG4gIHByb3RlY3RlZCBNQVhfU1RSSU5HX0xFTkdUSD86IG51bWJlcjtcbiAgcHJvdGVjdGVkIE1BWF9ERVBUSD86IG51bWJlcjtcblxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2VuZFBhY2thZ2VkKFxuICAgIHBhY2thZ2VkTWVzc2FnZTogSVJlcXVlc3Q8YW55PixcbiAgICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgYW55PlxuICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gIGFzeW5jIHNlbmQobWVzc2FnZTogYW55LCBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHRydW5jYXRlZE1lc3NhZ2UgPSBMb2dTdHJhdGVneS50cnVuY2F0ZUFuZFN0cmluZ2lmeShcbiAgICAgIG1lc3NhZ2UsXG4gICAgICAwLFxuICAgICAgdGhpcy5NQVhfU1RSSU5HX0xFTkdUSCxcbiAgICAgIHRoaXMuTUFYX0RFUFRIXG4gICAgKTtcblxuICAgIGNvbnN0IHBhY2thZ2VkTWVzc2FnZTogSVJlcXVlc3Q8YW55PiA9IHtcbiAgICAgIGhlYWRlcjogdGhpcy5jcmVhdGVSZXF1ZXN0SGVhZGVyKCksXG4gICAgICBib2R5OiB0cnVuY2F0ZWRNZXNzYWdlLFxuICAgIH07XG5cbiAgICBhd2FpdCB0aGlzLnNlbmRQYWNrYWdlZChwYWNrYWdlZE1lc3NhZ2UsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVJlcXVlc3RIZWFkZXIoKTogSVJlcXVlc3RIZWFkZXIge1xuICAgIHJldHVybiB7XG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICByZXF1ZXN0SWQ6IHV1aWR2NCgpLFxuICAgICAgcmVxdWVzdGVyQWRkcmVzczogXCJsb2ctc3RyYXRlZ3lcIixcbiAgICAgIHJlcXVlc3RUeXBlOiBcIkxPRzo6TUVTU0FHRVwiLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgdHJ1bmNhdGVBbmRTdHJpbmdpZnkoXG4gICAgdmFsdWU6IGFueSxcbiAgICBkZXB0aDogbnVtYmVyID0gMCxcbiAgICBtYXhTdHJpbmdMZW5ndGggPSA1MDAwLFxuICAgIG1heERlcHRoID0gMTBcbiAgKTogYW55IHtcbiAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkge1xuICAgICAgcmV0dXJuIFwiW09iamVjdCBkZXB0aCBsaW1pdCBleGNlZWRlZF1cIjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiBtYXhTdHJpbmdMZW5ndGhcbiAgICAgICAgPyB2YWx1ZS5zdWJzdHJpbmcoMCwgbWF4U3RyaW5nTGVuZ3RoKSArIFwiLi4uXCJcbiAgICAgICAgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogdmFsdWUubmFtZSxcbiAgICAgICAgbWVzc2FnZTogdGhpcy50cnVuY2F0ZUFuZFN0cmluZ2lmeSh2YWx1ZS5tZXNzYWdlKSxcbiAgICAgICAgc3RhY2s6IHRoaXMudHJ1bmNhdGVBbmRTdHJpbmdpZnkodmFsdWUuc3RhY2spLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gYFtCaW5hcnkgZGF0YSBvZiBsZW5ndGggJHt2YWx1ZS5ieXRlTGVuZ3RofV1gO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm1hcCgoaXRlbSkgPT4gdGhpcy50cnVuY2F0ZUFuZFN0cmluZ2lmeShpdGVtLCBkZXB0aCArIDEpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb25zdCB0cnVuY2F0ZWRPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgcHJvcF0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgICAgIHRydW5jYXRlZE9iamVjdFtrZXldID0gdGhpcy50cnVuY2F0ZUFuZFN0cmluZ2lmeShwcm9wLCBkZXB0aCArIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydW5jYXRlZE9iamVjdDtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJbVW5zZXJpYWxpemFibGUgZGF0YV1cIjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uc29sZVN0cmF0ZWd5IGV4dGVuZHMgTG9nU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3RvcihtYXhTdHJpbmdMZW5ndGg/OiBudW1iZXIsIG1heERlcHRoPzogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAobWF4U3RyaW5nTGVuZ3RoKSB0aGlzLk1BWF9TVFJJTkdfTEVOR1RIID0gbWF4U3RyaW5nTGVuZ3RoO1xuICAgIGlmIChtYXhEZXB0aCkgdGhpcy5NQVhfREVQVEggPSBtYXhEZXB0aDtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBzZW5kUGFja2FnZWQoXG4gICAgcGFja2FnZWRNZXNzYWdlOiBJUmVxdWVzdDxhbnk+LFxuICAgIG9wdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSBMb2dnYWJsZS5Gb3JtYXRMb2dNZXNzYWdlKHBhY2thZ2VkTWVzc2FnZS5ib2R5KTtcbiAgICBjb25zb2xlLmxvZyhmb3JtYXR0ZWRNZXNzYWdlKTtcblxuICAgIC8vIElmIHRoZXJlIGFyZSBhZGRpdGlvbmFsIG9wdGlvbnMsIGxvZyB0aGVtIHNlcGFyYXRlbHlcbiAgICBpZiAob3B0aW9ucyAmJiBPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkFkZGl0aW9uYWwgb3B0aW9uczpcIiwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG59XG4iXX0=