"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogStrategy = void 0;
const uuid_1 = require("uuid");
class LogStrategy {
    constructor() { }
    async send(message, options) {
        const truncatedMessage = LogStrategy.truncateAndStringify(message, 0, this.MAX_STRING_LENGTH, this.MAX_DEPTH);
        const packagedMessage = {
            header: this.createRequestHeader(),
            body: truncatedMessage,
        };
        await this.sendPackaged(packagedMessage, options);
    }
    createRequestHeader() {
        return {
            timestamp: Date.now(),
            requestId: (0, uuid_1.v4)(),
            requesterAddress: "log-strategy",
            requestType: "LOG::MESSAGE",
        };
    }
    static truncateAndStringify(value, depth = 0, maxStringLength = 5000, maxDepth = 10) {
        if (depth > maxDepth) {
            return "[Object depth limit exceeded]";
        }
        if (value === undefined || value === null) {
            return value;
        }
        if (typeof value === "string") {
            return value.length > maxStringLength
                ? value.substring(0, maxStringLength) + "..."
                : value;
        }
        if (typeof value === "number" || typeof value === "boolean") {
            return value;
        }
        if (value instanceof Error) {
            return {
                name: value.name,
                message: this.truncateAndStringify(value.message),
                stack: this.truncateAndStringify(value.stack),
            };
        }
        if (Buffer.isBuffer(value) || ArrayBuffer.isView(value)) {
            return `[Binary data of length ${value.byteLength}]`;
        }
        if (Array.isArray(value)) {
            return value.map((item) => this.truncateAndStringify(item, depth + 1));
        }
        if (typeof value === "object") {
            const truncatedObject = {};
            for (const [key, prop] of Object.entries(value)) {
                truncatedObject[key] = this.truncateAndStringify(prop, depth + 1);
            }
            return truncatedObject;
        }
        return "[Unserializable data]";
    }
}
exports.LogStrategy = LogStrategy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nU3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvbG9nZ2luZy9Mb2dTdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBb0M7QUFFcEMsTUFBc0IsV0FBVztJQVEvQixnQkFBZSxDQUFDO0lBRWhCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBWSxFQUFFLE9BQTZCO1FBQ3BELE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUN2RCxPQUFPLEVBQ1AsQ0FBQyxFQUNELElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FDZixDQUFDO1FBRUYsTUFBTSxlQUFlLEdBQWtCO1lBQ3JDLE1BQU0sRUFBRSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDbEMsSUFBSSxFQUFFLGdCQUFnQjtTQUN2QixDQUFDO1FBRUYsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE9BQU87WUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNyQixTQUFTLEVBQUUsSUFBQSxTQUFNLEdBQUU7WUFDbkIsZ0JBQWdCLEVBQUUsY0FBYztZQUNoQyxXQUFXLEVBQUUsY0FBYztTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxvQkFBb0IsQ0FDekIsS0FBVSxFQUNWLFFBQWdCLENBQUMsRUFDakIsZUFBZSxHQUFHLElBQUksRUFDdEIsUUFBUSxHQUFHLEVBQUU7UUFFYixJQUFJLEtBQUssR0FBRyxRQUFRLEVBQUUsQ0FBQztZQUNyQixPQUFPLCtCQUErQixDQUFDO1FBQ3pDLENBQUM7UUFFRCxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQzFDLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDOUIsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLGVBQWU7Z0JBQ25DLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsR0FBRyxLQUFLO2dCQUM3QyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ1osQ0FBQztRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzVELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELElBQUksS0FBSyxZQUFZLEtBQUssRUFBRSxDQUFDO1lBQzNCLE9BQU87Z0JBQ0wsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO2dCQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7Z0JBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUM5QyxDQUFDO1FBQ0osQ0FBQztRQUVELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDeEQsT0FBTywwQkFBMEIsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDO1FBQ3ZELENBQUM7UUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN6QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQztRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDOUIsTUFBTSxlQUFlLEdBQTJCLEVBQUUsQ0FBQztZQUNuRCxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUNoRCxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEUsQ0FBQztZQUNELE9BQU8sZUFBZSxDQUFDO1FBQ3pCLENBQUM7UUFFRCxPQUFPLHVCQUF1QixDQUFDO0lBQ2pDLENBQUM7Q0FDRjtBQXJGRCxrQ0FxRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUmVxdWVzdCwgSVJlcXVlc3RIZWFkZXIgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExvZ1N0cmF0ZWd5IHtcbiAgcHJvdGVjdGVkIE1BWF9TVFJJTkdfTEVOR1RIPzogbnVtYmVyO1xuICBwcm90ZWN0ZWQgTUFYX0RFUFRIPzogbnVtYmVyO1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2VuZFBhY2thZ2VkKFxuICAgIHBhY2thZ2VkTWVzc2FnZTogSVJlcXVlc3Q8YW55PixcbiAgICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgYW55PlxuICApOiBQcm9taXNlPHZvaWQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBhc3luYyBzZW5kKG1lc3NhZ2U6IGFueSwgb3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB0cnVuY2F0ZWRNZXNzYWdlID0gTG9nU3RyYXRlZ3kudHJ1bmNhdGVBbmRTdHJpbmdpZnkoXG4gICAgICBtZXNzYWdlLFxuICAgICAgMCxcbiAgICAgIHRoaXMuTUFYX1NUUklOR19MRU5HVEgsXG4gICAgICB0aGlzLk1BWF9ERVBUSFxuICAgICk7XG5cbiAgICBjb25zdCBwYWNrYWdlZE1lc3NhZ2U6IElSZXF1ZXN0PGFueT4gPSB7XG4gICAgICBoZWFkZXI6IHRoaXMuY3JlYXRlUmVxdWVzdEhlYWRlcigpLFxuICAgICAgYm9keTogdHJ1bmNhdGVkTWVzc2FnZSxcbiAgICB9O1xuXG4gICAgYXdhaXQgdGhpcy5zZW5kUGFja2FnZWQocGFja2FnZWRNZXNzYWdlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVSZXF1ZXN0SGVhZGVyKCk6IElSZXF1ZXN0SGVhZGVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgcmVxdWVzdElkOiB1dWlkdjQoKSxcbiAgICAgIHJlcXVlc3RlckFkZHJlc3M6IFwibG9nLXN0cmF0ZWd5XCIsXG4gICAgICByZXF1ZXN0VHlwZTogXCJMT0c6Ok1FU1NBR0VcIixcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHRydW5jYXRlQW5kU3RyaW5naWZ5KFxuICAgIHZhbHVlOiBhbnksXG4gICAgZGVwdGg6IG51bWJlciA9IDAsXG4gICAgbWF4U3RyaW5nTGVuZ3RoID0gNTAwMCxcbiAgICBtYXhEZXB0aCA9IDEwXG4gICk6IGFueSB7XG4gICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHtcbiAgICAgIHJldHVybiBcIltPYmplY3QgZGVwdGggbGltaXQgZXhjZWVkZWRdXCI7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gbWF4U3RyaW5nTGVuZ3RoXG4gICAgICAgID8gdmFsdWUuc3Vic3RyaW5nKDAsIG1heFN0cmluZ0xlbmd0aCkgKyBcIi4uLlwiXG4gICAgICAgIDogdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHZhbHVlLm5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMudHJ1bmNhdGVBbmRTdHJpbmdpZnkodmFsdWUubWVzc2FnZSksXG4gICAgICAgIHN0YWNrOiB0aGlzLnRydW5jYXRlQW5kU3RyaW5naWZ5KHZhbHVlLnN0YWNrKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGBbQmluYXJ5IGRhdGEgb2YgbGVuZ3RoICR7dmFsdWUuYnl0ZUxlbmd0aH1dYDtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5tYXAoKGl0ZW0pID0+IHRoaXMudHJ1bmNhdGVBbmRTdHJpbmdpZnkoaXRlbSwgZGVwdGggKyAxKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgY29uc3QgdHJ1bmNhdGVkT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHByb3BdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlKSkge1xuICAgICAgICB0cnVuY2F0ZWRPYmplY3Rba2V5XSA9IHRoaXMudHJ1bmNhdGVBbmRTdHJpbmdpZnkocHJvcCwgZGVwdGggKyAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVuY2F0ZWRPYmplY3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiW1Vuc2VyaWFsaXphYmxlIGRhdGFdXCI7XG4gIH1cbn1cbiJdfQ==